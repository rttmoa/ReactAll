name: flows
icon: environment_hub
label: Workflow
hidden: false
enable_files: true
version: 2
fields:
  name:
    type: text
    label: Name
    required: false
    searchable: true
    readonly: true
    name: name
  api_name:
    type: text
    label: Api Name
    required: false
    inlineHelpText: "配置了Api Name 的流程才能同步为元数据"
    searchable: true
    name: api_name
  form:
    label: Form
    type: lookup
    reference_to: forms
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: form
    filterable: true
  category:
    label: Category
    type: lookup
    reference_to: categories
    name: category
    filterable: true
  state:
    label: State
    type: select
    options:
      - label: Enabled
        value: enabled
      - label: Disabled
        value: disabled
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: state
    filterable: true
  is_valid:
    label: Valid
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: is_valid
  current_no:
    label: Current Number
    type: number
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current_no
  description:
    label: Description
    type: textarea
    is_wide: true
    name: description
  help_text:
    label: Help
    type: textarea
    is_wide: true
    name: help_text
  company_id:
    label: Main Division
  created_by:
    label: Created by
  modified_by:
    label: Modified by
  current:
    label: Current
    type: object
    is_wide: true
    blackbox: true
    visible_on: "{{global.mode ==='read' ? true : false}}"
    readonly: true
    name: current
  current.modified:
    label: Modification Time of Current
    type: datetime
    readonly: true
    visible_on: "{{global.mode ==='read' ? true : false}}"
    hidden: true
    name: current.modified
  current.modified_by:
    label: Modified Currently by
    type: lookup
    reference_to: users
    readonly: true
    visible_on: "{{global.mode ==='read' ? true : false}}"
    hidden: true
    name: current.modified_by
    filterable: true
  current.created:
    label: Creation Time of Current
    type: datetime
    readonly: true
    visible_on: "{{global.mode ==='read' ? true : false}}"
    hidden: true
    name: current.created
  current.created_by:
    label: Created Currently by
    type: lookup
    reference_to: users
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    hidden: true
    name: current.created_by
    filterable: true
  current.steps:
    label: Current Steps
    type: grid
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    is_wide: true
    name: current.steps
  current.steps.$._id:
    type: text
    visible_on: "{{global.mode !='read' ? false : true}}"
    readonly: true
    hidden: true
    name: current.steps.$._id
  current.steps.$.name:
    label: Name
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    type: text
    name: current.steps.$.name
  current.steps.$.disableCC:
    label: Disable CC
    type: boolean
    visible_on: "{{global.mode !='read' ? false : true}}"
    readonly: true
    name: current.steps.$.disableCC
  current.steps.$.allowDistribute:
    label: Can Distribute Instance
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.allowDistribute
  current.steps.$.can_edit_main_attach:
    label: Can Edit Main Attach
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.can_edit_main_attach
  current.steps.$.can_edit_normal_attach:
    label: Can Edit Normal Attach
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.can_edit_normal_attach
  current.steps.$.distribute_optional_flows:
    label: Workflows of Distribution
    type: lookup
    reference_to: flows
    multiple: true
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    hidden: true
    name: current.steps.$.distribute_optional_flows
    filterable: true
  current.steps.$.cc_must_finished:
    label: Must Wait for CC finished
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.cc_must_finished
  current.steps.$.cc_alert:
    label: Pop up CC Alert
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.cc_alert
  current.steps.$.allowBatch:
    label: Batch Processing
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.allowBatch
  current.steps.$.oneClickApproval:
    label: One Click Approval
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.oneClickApproval
  current.steps.$.oneClickRejection:
    label: One Click Rejection
    type: boolean
    readonly: true
    visible_on: "{{global.mode !='read' ? false : true}}"
    name: current.steps.$.oneClickRejection
  perms:
    label: Permissions
    type: object
    is_wide: true
    blackbox: true
    name: perms
    group: Permissions
  perms.users_can_add:
    label: Users that Can Initiate New Request
    type: lookup
    reference_to: users
    multiple: true
    is_wide: true
    name: perms.users_can_add
    filterable: true
    group: Permissions
  perms.orgs_can_add:
    label: 'Departments that Can Initiate New Request'
    type: lookup
    reference_to: organizations
    multiple: true
    is_wide: true
    name: perms.orgs_can_add
    filterable: true
    group: Permissions
  perms.users_can_monitor:
    label: Users that Can Read All the Reqests
    type: lookup
    reference_to: users
    multiple: true
    is_wide: true
    name: perms.users_can_monitor
    filterable: true
    group: Permissions
  perms.orgs_can_monitor:
    label: Departments that Can Read All the Reqests
    type: lookup
    reference_to: organizations
    multiple: true
    is_wide: true
    name: perms.orgs_can_monitor
    filterable: true
    group: Permissions
  perms.users_can_admin:
    label: Users that Can Read , Relocat, Reassign or Delete  All the Reqests
    type: lookup
    reference_to: users
    multiple: true
    is_wide: true
    name: perms.users_can_admin
    filterable: true
    group: Permissions
  perms.orgs_can_admin:
    label: Departments that Can Read , Relocat, Reassign or Delete  All the Reqests
    type: lookup
    reference_to: organizations
    multiple: true
    is_wide: true
    name: perms.orgs_can_admin
    filterable: true
    group: Permissions
  app:
    label: App
    type: text
    omit: true
    hidden: true
    name: app
  historys:
    label: History Workflows
    type: grid
    blackbox: true
    omit: true
    hidden: true
    name: historys
  object_name:
    type: lookup
    label: Object
    reference_to: objects
    reference_to_field: name
    required: false
    filters: ['enable_workflow', '=', true]
    group: FlowBindObject
  instance_fields:
    type: grid
    is_wide: true
    required: false
    depend_on:
      - object_name
    group: FlowBindObject
    visible_on: "{{ (formData.object_name && global.mode ==='read') ? true : false}}"
    readonly: true
  instance_fields.$:
    label: Field
    blackbox: true
    type: object
  instance_fields.$.name:
    label: Field
    type: lookup
    multiple: false
    is_wide: false
    required: false
    reference_to: object_fields
    reference_to_field: name
    depend_on:
      - object_name
    filtersFunction: !<tag:yaml.org,2002:js/function> |-
      function (filters, values) {
        const objectName = _.isObject(values.object_name) ? values.object_name.name : values.object_name;
        if(objectName){
          if(values._grid_row_id){
            var selected = _.find(values.instance_fields, function(item){return item._id==values._grid_row_id});
            var selectedAll = _.pluck(values.instance_fields, 'name');
            if(selected){
              selectedAll = _.difference(selectedAll, [selected.name]);
            }
            if(selectedAll && selectedAll.length > 0){
              return [['object', '=', objectName], ['name', '!=', selectedAll]]
            }
          }
          return ['object', '=', objectName]
        }else{
          return ['_id', '=', 'no']
        }
      }
  instance_fields.$.required:
    label: Required
    type: boolean
  instance_table_fields:
    type: grid
    blackbox: true
    is_wide: true
    depend_on:
      - object_name
    group: FlowBindObject
    visible_on: "{{(formData.object_name && global.mode ==='read') ? true : false}}"
    readonly: true
  instance_table_fields.$.detail_field_fullname:
    type: lookup
    optionsFunction: !!js/function |
      function(values) {
        if (!(values != null ? values.object_name : void 0)) {
          return [];
        }
        const objectName = _.isObject(values.object_name) ? values.object_name.name : values.object_name;

        const options = [];
        const { detailsInfo } = Steedos.authRequest('/am/forms/getDetailsInfo', {
            type: 'post',
            async: false,
            data: JSON.stringify({
                objectName
            })
        });

        _.each(detailsInfo, function(related){
          let foo = related.split('.');
          let rObjectName = foo[0];
          let rFieldName = foo[1];
          let rObjectLable = Creator.getObject(rObjectName).label;
          let rObjectFieldLable = (_.find(Creator.getObject(rObjectName).fields, function(field){return field.name === rFieldName}) || {}).label;
          options.push({label: `${rObjectLable}.${rObjectFieldLable}`, value: related})
        })
        return options;
      }
  instance_table_fields.$.label:
    label: Label
    type: text
    inlineHelpText: default is the object name
  instance_table_fields.$.field_names:
    type: lookup
    create: false
    multiple: true
    reference_to: object_fields
    reference_to_field: name
    depend_on:
      - object_name
      - instance_table_fields
    filtersFunction: !<tag:yaml.org,2002:js/function> |-
      function (filters, values) {
        let relatedFieldFullname = null;
        const rowValue = _.find(values.instance_table_fields, function(item){
          return item._id === values._grid_row_id
        })
        if(rowValue){
          relatedFieldFullname = rowValue.detail_field_fullname
        }
        if(relatedFieldFullname){
          const objectName = relatedFieldFullname.substring(0, relatedFieldFullname.indexOf("."))
          return ['object', '=', objectName]
        }else{
          return ['_id', '=', 'no']
        }
      }
  instance_template:
    label: Instance Template
    type: code
    language: handlebars
    is_wide: true
    group: Template
    name: instance_template
  print_template:
    label: Print Template
    type: code
    language: handlebars
    is_wide: true
    group: Template
    name: print_template
  field_map:
    label: Mapping
    type: code
    language: json
    is_wide: true
    group: Synchronization
    name: field_map
  events:
    label: Events
    type: code
    language: javascript
    is_wide: true
    group: Script
    name: events
  distribute_optional_users:
    type: object
    label: Users to be Distributed
    reference_to: users
    multiple: true
    is_wide: true
    group: Distribution
    blackbox: true
    omit: true
    hidden: true
    name: distribute_optional_users
    filterable: true
  distribute_to_self:
    label: Distribute to myself
    type: boolean
    group: Distribution
    omit: true
    hidden: true
    name: distribute_to_self
  upload_after_being_distributed:
    label: Allow upload after being distributed
    type: boolean
    group: Distribution
    omit: true
    hidden: true
  name_formula:
    label: Formula of Title
    type: text
    group: Others
    name: name_formula
    omit: true
    hidden: true
  code_formula:
    label: Formula of Code
    type: text
    group: Others
    name: code_formula
    omit: true
    hidden: true
  auto_remind:
    label: Auto Remind
    type: boolean
    group: Others
    name: auto_remind
  sort_no:
    type: number
    label: Sort Number
    group: Others
    sortable: true
    name: sort_no
  timeout_auto_submit:
    label: Auto Commit if Time Out
    type: boolean
    group: Others
    name: timeout_auto_submit
  allow_select_step:
    label: Applicant can Select Steps and Handlers
    inlineHelpText: Allow the applicant to specify the flow steps and step handlers when submitting the application form. You need to modify the properties on the step through the Workflow Designer.
    type: boolean
    group: Others
list_views:
  all:
    label: All Workflows
    filter_scope: space
    columns:
      - name
      - state
      - category
      - sort_no
      - modified
    filter_fields:
      - state
      - category
      - company_id
    sort:
      - - modified
        - desc
actions:
  standard_new:
    label: New
    visible: !<tag:yaml.org,2002:js/function> |-
      function () {
              var permissions;
              permissions = Creator.getPermissions();

              if (permissions) {
                return permissions["allowCreate"];
              }
            }
    'on': list
    amis_schema: |-
      {
          "type": "service",
          "body": [
              {
                  "type": "button",
                  "label": "新建",
                  "id": "u:new_flow",
                  "onEvent": {
                      "click": {
                          "actions": [
                              {
                                  "actionType": "dialog",
                                  "dialog": {
                                      "type": "dialog",
                                      "data": {
                                        "&": "$$",
                                        "spaceId": "${context.tenantId}"
                                      },
                                      "title": "新建流程",
                                      "body": [
                                          {
                                              "type": "form",
                                              "id": "u:81f0d8165f54",
                                              "title": "表单",
                                              "body": [
                                                {
                                                  "type": "uuid",
                                                  "name": "id",
                                                  "length": 32
                                                },
                                                  {
                                                  "type": "select",
                                                  "name": "category",
                                                  "label": "分类",
                                                  "required": false,
                                                  "joinValues": false,
                                                  "extractValue": true,
                                                  "autoComplete": {
                                                    "method": "post",
                                                    "url": "${context.rootUrl}/graphql",
                                                    "data": {
                                                      "orderBy": "${orderBy}",
                                                      "orderDir": "${orderDir}",
                                                      "pageNo": "${page}",
                                                      "pageSize": "${perPage}",
                                                      "query": "{options:categories(filters: {__filters}, top: {__top}){_id label:name value:_id},count:categories__count(filters:{__filters})}",
                                                      "$term": "$term",
                                                      "$value": "$category._id",
                                                      "$": "$$",
                                                      "rfield": "${object_name}"
                                                    },
                                                    "headers": {
                                                      "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                    },
                                                    "requestAdaptor": "\n        var filters = '[]';\n        var top = 10;\n        if(api.data.$term){\n            filters = '[\"name\", \"contains\", \"'+ api.data.$term +'\"]';\n        }else if(api.data.$value){\n            filters = '[\"_id\", \"=\", \"'+ api.data.$value +'\"]';\n        }\n        api.data.query = api.data.query.replace(/{__filters}/g, filters).replace('{__top}', top);\n        return api;\n    "
                                                  },
                                                  "labelClassName": "text-left",
                                                  "clearValueOnHidden": true,
                                                  "fieldName": "category",
                                                  "id": "u:ebbbc41d58b8"
                                                },
                                                  {
                                                      "type": "input-text",
                                                      "label": "流程名",
                                                      "name": "name",
                                                      "id": "u:4af5bdaa813a",
                                                      "required": true,
                                                      "labelClassName": "text-left"
                                                  },
                                                  {
                                                    "type": "picker",
                                                    "name": "company_id",
                                                    "label": "分部",
                                                    "required": false,
                                                    "labelField": "name",
                                                    "valueField": "_id",
                                                    "modalMode": "dialog",
                                                    "source": {
                                                      "method": "post",
                                                      "url": "${context.rootUrl}/graphql",
                                                      "data": {
                                                        "orderBy": "${orderBy}",
                                                        "orderDir": "${orderDir}",
                                                        "pageNo": "${page}",
                                                        "pageSize": "${perPage}",
                                                        "query": "{rows:company(filters: {__filters}, top: {__top}, skip: {__skip}, sort: \"{__sort}\"){_id,name,code,organization,modified,_display:_ui{organization,modified}},count:company__count(filters:{__filters})}",
                                                        "$term": "$term",
                                                        "$self": "$$"
                                                      },
                                                      "headers": {
                                                        "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                      },
                                                      "requestAdaptor": "\n        const selfData = JSON.parse(JSON.stringify(api.data.$self));\n        var filters = [];\n        var pageSize = api.data.pageSize || 10;\n        var pageNo = api.data.pageNo || 1;\n        var skip = (pageNo - 1) * pageSize;\n        var orderBy = api.data.orderBy || '';\n        var orderDir = api.data.orderDir || '';\n        var sort = orderBy + ' ' + orderDir;\n        var allowSearchFields = [];\n        if(api.data.$term){\n            filters = [[\"name\", \"contains\", \"'+ api.data.$term +'\"]];\n        }else if(selfData.op === 'loadOptions' && selfData.value){\n            if(selfData.value?.indexOf(',') > 0){\n                filters = [[\"_id\", \"=\", selfData.value.split(',')]];\n            }else{\n                filters = [[\"_id\", \"=\", selfData.value]];\n            }\n        }\n        if(allowSearchFields){\n            allowSearchFields.forEach(function(key){\n                const keyValue = selfData[key];\n                if(keyValue){\n                    filters.push([key, \"contains\", keyValue]);\n                }\n            })\n        }\n\n        const filtersFunction = undefined;\n\n        if(filtersFunction){\n            const _filters = filtersFunction(filters, api.data.$self.__super.__super);\n            if(_filters && _filters.length > 0){\n                filters.push(_filters);\n            }\n        }\n\n        api.data.query = api.data.query.replace(/{__filters}/g, JSON.stringify(filters)).replace('{__top}', pageSize).replace('{__skip}', skip).replace('{__sort}', sort.trim());\n        return api;\n    ",
                                                      "adaptor": "\n    const enable_tree = undefined;\n    if(enable_tree){\n        const records = payload.data.rows;\n        const treeRecords = [];\n        const getChildren = (records, childrenIds)=>{\n            if(!childrenIds){\n                return;\n            }\n            const children = _.filter(records, (record)=>{\n                return _.includes(childrenIds, record._id)\n            });\n            _.each(children, (item)=>{\n                if(item.children){\n                    item.children = getChildren(records, item.children)\n                }\n            })\n            return children;\n        }\n\n        _.each(records, (record)=>{\n            if(!record.parent){\n                treeRecords.push(Object.assign({}, record, {children: getChildren(records, record.children)}));\n            }\n        });\n        payload.data.rows = treeRecords;\n    }\n    return payload;\n    "
                                                    },
                                                    "size": "lg",
                                                    "pickerSchema": {
                                                      "mode": "table",
                                                      "name": "thelist",
                                                      "draggable": false,
                                                      "headerToolbar": [
                                                        "reload"
                                                      ],
                                                      "defaultParams": {
                                                        "perPage": 20
                                                      },
                                                      "columns": [
                                                        {
                                                          "name": "_index",
                                                          "type": "text",
                                                          "width": 32,
                                                          "placeholder": ""
                                                        },
                                                        {
                                                          "name": "name",
                                                          "label": "分部名称",
                                                          "type": "tpl",
                                                          "tpl": "<a href=\"/app/undefined/undefined/view/${undefined}\">${name}</a>",
                                                          "className": "whitespace-nowrap",
                                                          "html": null
                                                        },
                                                        {
                                                          "name": "code",
                                                          "label": "分部代码",
                                                          "type": "text",
                                                          "className": "whitespace-nowrap",
                                                          "html": null
                                                        },
                                                        {
                                                          "name": "organization",
                                                          "label": "关联部门",
                                                          "type": "tpl",
                                                          "tpl": "<a href=\"/app/undefined/${_display.organization.objectName}/view/${_display.organization.value}\">${_display.organization.label}</a>",
                                                          "className": "whitespace-nowrap",
                                                          "html": null
                                                        },
                                                        {
                                                          "name": "modified",
                                                          "label": "修改时间",
                                                          "sortable": true,
                                                          "type": "tpl",
                                                          "tpl": "<div>${_display.modified}</div>",
                                                          "className": "whitespace-nowrap",
                                                          "html": null
                                                        },
                                                        null
                                                      ],
                                                      "syncLocation": false,
                                                      "keepItemSelectionOnPageChange": true,
                                                      "checkOnItemClick": false,
                                                      "labelTpl": "${name}",
                                                      "autoFillHeight": false
                                                    },
                                                    "joinValues": false,
                                                    "extractValue": true,
                                                    "labelClassName": "text-left",
                                                    "clearValueOnHidden": true,
                                                    "fieldName": "company_id",
                                                    "id": "u:18291ffb397f"
                                                  },
                                                  {
                                                      "label": "绑定对象",
                                                      "type": "select",
                                                      "name": "object_name2",
                                                      "id": "u:4e769995f638",
                                                      "required": false,
                                                      "joinValues": false,
                                                      "extractValue": true,
                                                      "labelField": "label",
                                                      "valueField": "value",
                                                      "className": "",
                                                      "labelClassName": "text-left",
                                                      "en-US": {
                                                          "label": "Object"
                                                      },
                                                      "checkAll": false,
                                                      "searchable": true,
                                                      "source": {
                                                          "method": "post",
                                                          "url": "${context.rootUrl}/graphql",
                                                          "data": {
                                                              "orderBy": "${orderBy}",
                                                              "orderDir": "${orderDir}",
                                                              "pageNo": "${page}",
                                                              "pageSize": "${perPage}",
                                                              "query": "{options:objects(filters: {__filters}, top: {__top}, sort: \"{__sort}\"){_id label:label value:name},count:objects__count(filters:{__filters}),defaultValueOptions:objects(filters:{__options_filters}){_id label:label value:name}}",
                                                              "$term": "$term",
                                                              "rfield": "${object_name}"
                                                          },
                                                          "headers": {
                                                              "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                          },
                                                          "adaptor": "\n            const data = payload.data;\n            var defaultValueOptions = data.defaultValueOptions;\n            // 字段值下拉选项合并到options中\n            data.options = _.unionWith(defaultValueOptions, data.options, function(a,b){\n                return a[\"value\"]=== b[\"value\"];\n            });\n            delete data.defaultValueOptions;\n            payload.data.options = data.options;\n            return payload;\n        ",
                                                          "requestAdaptor": "\n        var filters = [];\n        var top = 10;\n        if(api.data.$term){\n            filters = [[\"label\", \"contains\", api.data.$term]];\n        }\n        // else if(api.data.$value){\n        //     filters = [[\"_id\", \"=\", api.data.$value]];\n        // }\n\n        var fieldFilters = [\"enable_workflow\",\"=\",true];\n        if(fieldFilters && fieldFilters.length){\n            filters.push(fieldFilters);\n        }\n\n        const filtersFunction = undefined;\n\n        if(filtersFunction){\n            const _filters = filtersFunction(filters, api.data.$);\n            if(_filters && _filters.length > 0){\n                filters.push(_filters);\n            }\n        }\n        var sort = \"\";\n        api.data.query = api.data.query.replace(/{__filters}/g, JSON.stringify(filters)).replace('{__top}', top).replace('{__sort}', sort.trim());\n\n        var defaultValue = api.data.$value;\n        var optionsFiltersOp = \"=\";\n        var optionsFilters = [[\"name\", optionsFiltersOp, []]];\n        if (defaultValue && !api.data.$term) { \n            // 字段值单独请求，没值的时候在请求中返回空\n            optionsFilters = [[\"name\", optionsFiltersOp, defaultValue]];\n        }\n        api.data.query = api.data.query.replace(/{__options_filters}/g, JSON.stringify(optionsFilters));\n        return api;\n    "
                                                      },
                                                      "multiple": false
                                                  },{"type": "checkbox","option": "","name": "enable_amisform","id": "u:f581950a606a","label": "启用amis表单"}
                                              ],
                                              "api": {
                                                  "method": "post",
                                                  "url": "${context.rootUrl}/am/forms?sync_token=",
                                                  "data": {
                                                      "&": "$$",
                                                      "space": "${spaceId}"
                                                  },
                                                  "requestAdaptor": "const {id, name, space, enable_amisform} = api.body;var form = {\n  id,\n  name,\n  space,\n  enable_amisform,\n  is_valid: true,\n  app: 'workflow',\n  current: {\n    id\n  }\n\n};\nvar body = api.body;\nif (body.category) {\n  form.category = body.category\n}\n\nlet companyId = body.company_id\nif (companyId) {\n  form.company_id = companyId\n}\n\nif (body.object_name2) {\n  form.object_name = body.object_name2\n}\n\napi.data = {\n  Forms: [form]\n};\n\nconsole.log(`api`, api)\nreturn api;"
                                              },
                                              "onEvent": {
                                              "submitSucc": {
                                                "weight": 0,
                                                "actions": [
                                                  {
                                                    "actionType": "broadcast",
                                                    "args": {
                                                      "eventName": "@data.changed.flows",
                                                      "recordId": "newFlow"
                                                    },
                                                    "data": {
                                                      "objectName": "flows"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                      ],
                                      "id": "u:85b77731ab26"
                                  }
                              }
                          ],
                          "weight": 0
                      }
                  }
              }
          ],
          "regions": [
              "body"
          ],
          "data": {
              "context": {
                  "rootUrl": "http://127.0.0.1:5300"
              },
              "app_id": "",
              "tab_id": "",
              "object_name": "",
              "dataComponentId": "",
              "record_id": "",
              "record": {},
              "permissions": {}
          },
          "bodyClassName": "p-0",
          "id": "u:35a8389e43b3"
      }
    is_enable: true
    type: amis_button
  design:
    label: Designer
    visible: !<tag:yaml.org,2002:js/function> |-
      function () {
              return true;
            }
    'on': list
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              return WorkflowCore.openFlowDesign(Steedos.locale().toLocaleLowerCase(), Steedos.spaceId(), null, Creator.getUserCompanyId());
            }
  standard_edit:
    visible: true
    'on': record
  standard_delete:
    visible: false
    'on': record_more
  designFlow:
    label: Flow Designer
    visible: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, record_permissions) {
              return true;
            }
    'on': record
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              return WorkflowCore.openFlowDesign(Steedos.locale().toLocaleLowerCase(), Steedos.spaceId(), record_id, Creator.getUserCompanyId());
            }
  designForm:
    label: Form Designer
    visible: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, record_permissions, data) {
              const record = Creator.getObjectRecord(object_name, record_id);
              if(record.enable_amisform){
                return false;
              };
              return true;
            }
    'on': record
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              return WorkflowCore.openFormDesign(Steedos.locale(), Steedos.spaceId(), this.record.record.form, Creator.getUserCompanyId());
            }
  enableFlow:
    label: Enable Flow
    visible: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, record_permissions) {
        var record = Creator.getObjectRecord(object_name, record_id, 'state');
        if (record && record.state == 'disabled') {
          return true;
        }
        return false;
      }
    'on': record
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
        window.$("body").addClass("loading");
        var record = Creator.getObjectRecord(object_name, record_id, 'space,form,state');
        var userSession = Creator.USER_CONTEXT;
        var authorization = "Bearer " + userSession.spaceId + "," + userSession.user.authToken;
        var formId = _.isObject(record.form) ? record.form._id : record.form;
        window.$.ajax({
          type: "POST",
          url: Steedos.absoluteUrl("/am/flows/state?methodOverride=PUT"),
          data: JSON.stringify({ 'Flows': [{id: record._id, space: _.isObject(record.space) ? record.space._id : record.space, state: 'enabled', form: formId }] }),
          dataType: "json",
          contentType: 'application/json',
          beforeSend: function (XHR) {
            XHR.setRequestHeader('Content-Type', 'application/json');
            XHR.setRequestHeader('Authorization', authorization);
          },
          success: function (data) {
            window.$("body").removeClass("loading");
            toastr.success("操作已成功！");
            SteedosUI.reloadRecord(object_name, record_id);
            FlowRouter.reload();
          },
          error: function (XMLHttpRequest, textStatus, errorThrown) {
            window.$("body").removeClass("loading");
            toastr.error(XMLHttpRequest.responseJSON);
          }
        });
      }
  disableFlow:
    label: Disable Flow
    visible: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, record_permissions) {
        var record = Creator.getObjectRecord(object_name, record_id, 'state');
        if (record && record.state == 'enabled') {
          return true;
        }
        return false;
      }
    'on': record
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
        window.$("body").addClass("loading");
        var record = Creator.getObjectRecord(object_name, record_id, 'space,form,state');
        var userSession = Creator.USER_CONTEXT;
        var authorization = "Bearer " + userSession.spaceId + "," + userSession.user.authToken;
        var formId = _.isObject(record.form) ? record.form._id : record.form;
        window.$.ajax({
          type: "POST",
          url: Steedos.absoluteUrl("/am/flows/state?methodOverride=PUT"),
          data: JSON.stringify({ 'Flows': [{id: record._id, space: _.isObject(record.space) ? record.space._id : record.space, state: 'disabled', form: formId }] }),
          dataType: "json",
          contentType: 'application/json',
          beforeSend: function (XHR) {
            XHR.setRequestHeader('Content-Type', 'application/json');
            XHR.setRequestHeader('Authorization', authorization);
          },
          success: function (data) {
            window.$("body").removeClass("loading");
            toastr.success("操作已成功！");
            SteedosUI.reloadRecord(object_name, record_id);
            FlowRouter.reload();
          },
          error: function (XMLHttpRequest, textStatus, errorThrown) {
            window.$("body").removeClass("loading");
            toastr.error(XMLHttpRequest.responseJSON);
          }
        });
      }
  export_default_template:
    label: Export Default Template
    'on': record_more
    visible: !<tag:yaml.org,2002:js/function> |-
      function () {
              return true;
            }
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              var url = Steedos.absoluteUrl("/api/workflow/export/talbe_template?flow=" + record_id);
              return window.open(url, '_blank');
            }
  exportFlow:
    label: Export Workflow
    visible: true
    'on': record_more
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              var flow, form_id, ref2, ref3, ref4;
              console.log("exportFlow", object_name, record_id, fields);

              if (_.isString((ref2 = this.record) != null ? ref2.form : void 0)) {
                form_id = this.record.form;
              } else if ((ref3 = this.record) != null ? (ref4 = ref3.form) != null ? ref4._id : void 0 : void 0) {
                form_id = this.record.form._id;
              }

              if (form_id) {
                return window.open(Steedos.absoluteUrl("/api/workflow/export/form?form=" + form_id), '_blank');
              } else {
                flow = Creator.getCollection(object_name).findOne(record_id);
                if (flow) {
                  return window.open(Steedos.absoluteUrl("/api/workflow/export/form?form=" + flow.form), '_blank');
                }
              }
            }
  # importFlow:
  #   label: Import Workflow
  #   visible: true
  #   'on': list
  #   todo: !<tag:yaml.org,2002:js/function> |-
  #     function () {
  #             return Modal.show("admin_import_flow_modal", {
  #               onSuccess: function (flows) {
  #                 if (flows.length > 0) {
  #                   return FlowRouter.go("/app/admin/flows/view/" + flows[0]);
  #                 }
  #               }
  #             });
  #           }
  # exportFlows:
  #   label: Export Workflows
  #   visible: true
  #   'on': list
  #   todo: !<tag:yaml.org,2002:js/function> |-
  #     function () {
  #             let selectedRows = SteedosUI.getTableSelectedRows(`listview_flows_${Session.get("list_view_id")}`);
  #             let ids = _.pluck(selectedRows, '_id');
  #             if(ids && ids.length > 0){
  #               window.open(Steedos.absoluteUrl("/api/workflow/export/form?flows=" + ids.join(',')), '_blank');
  #             }else{
  #               toastr.warning("请选择要导出的流程");
  #             }
  #           }
  upgradeFlow:
    label: Upgrade Workflow
    visible: true
    'on': record_more
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              return Modal.show("admin_import_flow_modal", {
                flowId: record_id,
                onSuccess: function () {
                  toastr.success("流程升级成功")
                }
              });
            }
  copyFlow:
    label: Copy Workflow
    visible: true
    'on': record_more
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
              return Modal.show("copy_flow_modal", {
                record_id: record_id,
                onSuccess: function (flows) {
                  if (flows.length > 0) {
                    return FlowRouter.go("/app/admin/flows/view/" + flows[0]);
                  }
                }
              });
            }
  distributeAdmin:
    label: Set Distribution Options
    visible: true
    'on': record_more
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields, props) {
        var queryResult = Steedos.authRequest("/graphql", {
            type: 'POST',
            async: false,
            data: JSON.stringify({
                query: `{record:${object_name}__findOne(id: "${record_id}"){_id, name, distribute_optional_users, current}}`
            }),
            contentType: 'application/json',
            error: function () { }
        });
        var recordDoc = queryResult && queryResult.data && queryResult.data.record;
        return Modal.show("distribute_edit_flow_modal", {
          flow: recordDoc
        });
      }
  removeFlow:
    label: Delete
    visible: true
    'on': record
    todo: !<tag:yaml.org,2002:js/function> |-
      function (object_name, record_id, fields) {
        var record = Creator.getObjectRecord(object_name, record_id, 'name,form');
        var formId = _.isObject(record.form) ? record.form._id : record.form;
        var flowName = record.name;
        swal({
          title: '为了确保安全，请输入您要删除的流程名(同时会删除相关的申请单)',
          inputPlaceholder: '流程名',
          type: "input",
          confirmButtonText: t('OK'),
          cancelButtonText: t('Cancel'),
          showCancelButton: true,
          closeOnConfirm: false
        }, function (inputText) {
          if (inputText == false) {
            return false;
          }

          if (inputText != flowName) {
            swal.showInputError('您输入的名称不正确');
            return false;
          }
          window.$("body").addClass("loading");
          var userSession = Creator.USER_CONTEXT;
          var authorization = "Bearer " + userSession.spaceId + "," + userSession.user.authToken;
          window.$.ajax({
            type: "POST",
            url: Steedos.absoluteUrl("/am/forms?methodOverride=DELETE"),
            data: JSON.stringify({ 'Forms': [{ 'id': formId }] }),
            dataType: "json",
            contentType: 'application/json',
            beforeSend: function (XHR) {
              XHR.setRequestHeader('Content-Type', 'application/json');
              XHR.setRequestHeader('Authorization', authorization);
            },
            success: function (data) {
              window.$("body").removeClass("loading");
              toastr.success("操作已成功！");
              var gridObjectNameClass = object_name.replace(/\./g,"-");
              var gridContainer = window.$(`.gridContainer.${gridObjectNameClass}`);
              var dxDataGridInstance, isOpenerRemove;
              if (!(gridContainer != null ? gridContainer.length : void 0)) {
                if (window.opener) {
                  isOpenerRemove = true;
                  gridContainer = window.opener.$(`.gridContainer.${gridObjectNameClass}`);
                }
              }
              if (gridContainer != null ? gridContainer.length : void 0) {
                dxDataGridInstance = gridContainer.dxDataGrid().dxDataGrid('instance');
              }
              if (dxDataGridInstance) {
                Template.creator_grid.refresh(dxDataGridInstance);
              }
              if (isOpenerRemove || !dxDataGridInstance) {
                if (isOpenerRemove) {
                  window.close();
                } else if (record_id === Session.get("record_id") && !Steedos.isMobile() && list_view_id !== 'calendar' && object_name !== "cms_posts") {
                  var appid = Session.get("app_id");
                  var list_view_id = Session.get("list_view_id");
                  if (!list_view_id) {
                    list_view_id = "all";
                  }
                  FlowRouter.go(`/app/${appid}/${object_name}/grid/${list_view_id}`);
                }
              }
              window.refreshGrid();
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
              window.$("body").removeClass("loading");
              toastr.error(XMLHttpRequest.responseJSON);
            }
          });
          sweetAlert.close();
        })
      }
  addFormFields:
    label: AddFields
    on: record
    amis_schema: |-
      {
        "type": "service",
        "body": [
          {
            "type": "button",
            "label": "添加字段",
            "id": "u:add_form_fields2",
            "onEvent": {
              "click": {
                "actions": [
                  {
                    "actionType": "dialog",
                    "dialog": {
                      "type": "dialog",
                      "title": "添加字段",
                      "size": "lg",
                      "data": {
                        "&": "$$",
                        "record_id": "${record_id}"
                      },
                      "body": [
                        {
                          "type": "form",
                          "debug": false,
                          "id": "addFormFieldsForm",
                          "title": "表单",
                          "body": [
                            {
                              "label": "绑定对象",
                              "type": "select",
                              "name": "object_name",
                              "id": "u:4e769995f638",
                              "required": true,
                              "joinValues": false,
                              "extractValue": true,
                              "labelField": "label",
                              "valueField": "value",
                              "labelClassName": "text-left",
                              "en-US": {
                                "label": "Object"
                              },
                              "checkAll": false,
                              "searchable": true,
                              "source": {
                                "method": "get",
                                "url": "${context.rootUrl}/service/api/amis-metadata-objects/objects/options",
                                "headers": {
                                  "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                }
                              },
                              "multiple": false
                            },
                            {
                              "type": "tabs",
                              "tabs": [
                                {
                                  "title": "申请单字段",
                                  "body": [
                                    {
                                      "type": "wrapper",
                                      "body": [
                                        {
                                          "type": "service",
                                          "body": [
                                            {
                                              "name": "fields",
                                              "required": true,
                                              "type": "crud",
                                              "strictMode": true,
                                              "affixHeader": false,
                                              "editable": true,
                                              "addable": false,
                                              "removable": true,
                                              "draggable": false,
                                              "columns": [
                                                {
                                                  "name": "field_name_label",
                                                  "label": "字段",
                                                  "type": "tpl",
                                                  "tpl": "${fields_options|filter:value:equals:name|pick:label}",
                                                  "id": "u:b95c69a1cd84"
                                                },
                                                {
                                                  "name": "required",
                                                  "label": "必填",
                                                  "quickEdit": {
                                                    "mode": "inline",
                                                    "type": "checkbox",
                                                    "onEvent": {
                                                      "change": {
                                                        "actions": [
                                                          {
                                                            "actionType": "custom",
                                                            "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForField = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input.__super;\n  const formValue = input.__super.__super.__super;\n  const name = rowValue.name;\n  rowValue[prop_name] = currentPropValue;\n  let newFields = formValue.fields.map(function (item) {\n    if (item.name == name) {\n      return Object.assign({}, item, rowValue);\n    }\n    else {\n      return item;\n    }\n  });\n  const fieldGroups = input.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  newFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: newFields\n  }\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"addFormFieldsForm\",\n  args: {\n    value: quickEidtSaveForField(eventData, \"required\")\n  }\n});\n"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "tpl": null,
                                                    "labelClassName": "text-left",
                                                    "id": "u:bbd1c15b6504",
                                                    "name": "required"
                                                  },
                                                  "id": "u:e54afb5cc05c",
                                                  "placeholder": "-"
                                                }
                                              ],
                                              "className": "col-span-2",
                                              "labelClassName": "text-left",
                                              "source": "${fields}",
                                              "footable": false,
                                              "headerToolbar": [
                                                {
                                                  "type": "button",
                                                  "actionType": "dialog",
                                                  "dialog": {
                                                    "title": "设置字段",
                                                    "body": [
                                                      {
                                                        "type": "transfer",
                                                        "name": "picked_fields",
                                                        "sortable": true,
                                                        "source": "${fields_options}",
                                                        "value": "${fields|pick:name}",
                                                        "searchable": true,
                                                        "id": "u:502c4ecd81b6"
                                                      }
                                                    ],
                                                    "onEvent": {
                                                      "confirm": {
                                                        "actions": [
                                                          {
                                                            "actionType": "custom",
                                                            "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 清空主表单fields字段值\nconst clearFields = function (input) { \n  return {\n    fields: []\n  }\n}\n\n// 把”设置字段“弹出窗口中设置的字段转为主表单fields字段值格式\nconst convertDataForFields = function (input) {\n  let pickedFields = input.picked_fields || [];\n  const superFields = _.keyBy(input.__super.fields, 'name');\n  if (typeof pickedFields === \"string\") {\n    pickedFields = pickedFields.split(\",\");\n  }\n  const fieldOptions = lodash.keyBy(input.__super.__super.__super.__super.__super.fields_options, \"value\");\n  const convertedFields = pickedFields.map(function (name) {\n    const superField = superFields[name];\n    if (superField) {\n      return superField;\n    }\n    else {\n      const fieldOption = fieldOptions[name];\n      return {\n        name: name,\n        is_readonly: fieldOption.readonly,\n        required: fieldOption.required,\n        group: fieldOption.group\n      }\n    }\n  });\n  const fieldGroups = input.__super.__super.__super.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  convertedFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: convertedFields\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"addFormFieldsForm\",\n  args: {\n    value: clearFields()\n  }\n});\n\nsetTimeout(function () {\n  doAction({\n    actionType: 'setValue',\n    componentId: \"addFormFieldsForm\",\n    args: {\n      value: convertDataForFields(eventData)\n    }\n  });\n}, 300);\n\n"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "type": "dialog",
                                                    "id": "u:c405734543e0",
                                                    "closeOnEsc": false,
                                                    "closeOnOutside": false,
                                                    "showCloseButton": true
                                                  },
                                                  "label": "设置字段",
                                                  "id": "u:853b890ab524"
                                                }
                                              ],
                                              "id": "u:22121edc42b1"
                                            }
                                          ],
                                          "id": "u:ac5b7818b88f",
                                          "affixFooter": false,
                                          "api": {
                                            "method": "get",
                                            "url": "/service/api/amis-metadata-objects/objects/${object_name}/fields/layout_options",
                                            "adaptor": "let data = payload.data;\ndata.fields_options = data.options;\n\ndelete data.options\npayload.data = data;\nreturn payload;\n",
                                            "sendOn": "!!this.object_name",
                                            "data": null,
                                            "headers": {
                                              "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                            }
                                          },
                                          "className": "col-span-2 m-0",
                                          "placeholder": "-",
                                          "onEvent": {
                                            "fetchInited": {
                                              "actions": [
                                                {
                                                  "actionType": "custom",
                                                  "script": "// 把字段中配置的group属性加到主表field_groups属性中\nconst mixingGroupsFromFields = function (input, formData) {\n  const groupsOptions = input.field_groups_options;\n  const groups = formData.field_groups || [];\n  const groupsForMixing = groupsOptions.map(function (item) {\n    return {\n      group_name: item\n    }\n  });\n  const mixedGroups = lodash.unionBy(groups, groupsForMixing, \"group_name\");\n  return {\n    field_groups: mixedGroups\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"addFormFieldsForm\",\n  args: {\n    value: mixingGroupsFromFields(eventData, context.props.data)\n  }\n});\n\n"
                                                }
                                              ]
                                            }
                                          },
                                          "messages": {}
                                        }
                                      ],
                                      "size": "none",
                                      "id": "u:100edb4c59d0"
                                    }
                                  ]
                                },
                                {
                                  "title": "申请单子表",
                                  "body": [
                                    {
                                      "type": "wrapper",
                                      "body": [
                                        {
                                          "type": "service",
                                          "id": "u:dbadaff47153",
                                          "api": {
                                            "method": "get",
                                            "url": "/service/api/amis-metadata-objects/objects/${object_name}/relatedLists/options",
                                            "sendOn": "!!this.object_name",
                                            "adaptor": "let data = payload.data;\ndata.related_lists_options = data.options;\ndelete data.options\npayload.data = data;\nreturn payload;\n",
                                            "headers": {
                                              "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                            }
                                          },
                                          "className": "col-span-2 m-0",
                                          "affixFooter": false,
                                          "body": [
                                            {
                                              "name": "instance_table_fields",
                                              "type": "crud",
                                              "strictMode": true,
                                              "affixHeader": false,
                                              "editable": true,
                                              "addable": true,
                                              "removable": true,
                                              "draggable": false,
                                              "columns": [
                                                {
                                                  "name": "index",
                                                  "label": "序号",
                                                  "className": "w-10",
                                                  "type": "static",
                                                  "value": "${index + 1}",
                                                  "id": "u:a2f05dc83cd4"
                                                },
                                                {
                                                  "name": "related_field_fullname_label",
                                                  "label": "子表名称",
                                                  "type": "tpl",
                                                  "tpl": "${related_lists_options|filter:value:equals:detail_field_fullname|pick:label}",
                                                  "id": "u:5204fc0fbe1c"
                                                },
                                                {
                                                  "name": "label",
                                                  "label": "显示标题",
                                                  "quickEdit": {
                                                    "type": "input-text",
                                                    "onEvent": {
                                                      "change": {
                                                        "actions": [
                                                          {
                                                            "actionType": "custom",
                                                            "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const detail_field_fullname = rowValue.detail_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.instance_table_fields.map(function (item) {\n    if (item.detail_field_fullname == detail_field_fullname) {\n      if (prop_name === \"detail_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          detail_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    instance_table_fields: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") { \n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[detail_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"addFormFieldsForm\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, \"label\")\n  }\n});\n"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "labelRemark": "默认为对象名称",
                                                    "className": "m-0",
                                                    "labelClassName": "text-left",
                                                    "id": "u:5b30f2a71830",
                                                    "name": "label"
                                                  },
                                                  "id": "u:1267e4351d66",
                                                  "placeholder": "-"
                                                },
                                                {
                                                  "name": "field_names",
                                                  "label": "显示的字段",
                                                  "quickEdit": {
                                                    "type": "transfer-picker",
                                                    "source": {
                                                      "method": "get",
                                                      "url": "/service/api/amis-metadata-objects/objects/${detail_field_fullname|split:.|first}/fields/options",
                                                      "cache": 60000,
                                                      "headers": {
                                                        "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                      }
                                                    },
                                                    "searchable": true,
                                                    "onEvent": {
                                                      "change": {
                                                        "actions": [
                                                          {
                                                            "actionType": "custom",
                                                            "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const detail_field_fullname = rowValue.detail_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.instance_table_fields.map(function (item) {\n    if (item.detail_field_fullname == detail_field_fullname) {\n      if (prop_name === \"detail_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          detail_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    instance_table_fields: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[detail_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"addFormFieldsForm\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"field_names\")\n  }\n});\n"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "joinValues": false,
                                                    "extractValue": true,
                                                    "mode": "inline",
                                                    "id": "u:a85f62af394f",
                                                    "name": "field_names"
                                                  },
                                                  "type": "tpl",
                                                  "tpl": "<%= data.related_object_fields_options && data.related_object_fields_options[data.detail_field_fullname] ? data.related_object_fields_options[data.detail_field_fullname].filter(function(item){ return data.field_names && data.field_names.indexOf(item.value) > -1;}).map(function(item){return item.label}) : data.field_names%>",
                                                  "id": "u:ce65d4020107",
                                                  "placeholder": "-"
                                                }
                                              ],
                                              "className": "col-span-2 m-0",
                                              "labelClassName": "text-left",
                                              "headerToolbar": [
                                                {
                                                  "type": "button",
                                                  "actionType": "dialog",
                                                  "dialog": {
                                                    "title": "设置子表",
                                                    "body": [
                                                      {
                                                        "type": "transfer",
                                                        "name": "picked_related_lists",
                                                        "sortable": true,
                                                        "source": "${related_lists_options}",
                                                        "value": "${instance_table_fields|pick:detail_field_fullname}",
                                                        "searchable": true,
                                                        "id": "u:ab6a6c9c8677"
                                                      }
                                                    ],
                                                    "onEvent": {
                                                      "confirm": {
                                                        "actions": [
                                                          {
                                                            "actionType": "custom",
                                                            "script": "// 清空主表单related_lists字段值\nconst clearRelatedLists = function (input) {\n  return {\n    instance_table_fields: []\n  }\n}\n\n// 把”设置子表“弹出窗口中设置的子表转为主表单related_lists字段值格式\nconst convertDataForRelatedLists = function (input) {\n  let pickedRelateds = input.picked_related_lists || [];\n  const superRelateds = _.keyBy(input.__super.instance_table_fields, 'detail_field_fullname');\n  if (typeof pickedRelateds === \"string\") {\n    pickedRelateds = pickedRelateds.split(\",\");\n  }\n  const convertedRelateds = pickedRelateds.map(function (key) {\n    return superRelateds[key] || {\n      detail_field_fullname: key,\n      sort_order: \"asc\"\n    }\n  });\n  return {\n    instance_table_fields: convertedRelateds\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"addFormFieldsForm\",\n  args: {\n    value: clearRelatedLists()\n  }\n});\n\nsetTimeout(function () {\n  doAction({\n    actionType: 'setValue',\n    componentId: \"addFormFieldsForm\",\n    args: {\n      value: convertDataForRelatedLists(eventData)\n    }\n  });\n}, 300);\n"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    "type": "dialog",
                                                    "id": "u:3663990f226a",
                                                    "closeOnEsc": false,
                                                    "closeOnOutside": false,
                                                    "showCloseButton": true
                                                  },
                                                  "label": "设置子表",
                                                  "id": "u:b9a5d3b611d7"
                                                }
                                              ],
                                              "source": "${instance_table_fields}",
                                              "footable": false,
                                              "columnsTogglable": true,
                                              "messages": {},
                                              "tableClassName": "min-w-max",
                                              "id": "u:95aea10231d3"
                                            }
                                          ],
                                          "messages": {}
                                        }
                                      ],
                                      "size": "none",
                                      "id": "u:100edb4c59d0"
                                    }
                                  ]
                                }
                              ]
                            }
                          ],
                          "mode": "normal",
                          "initApi": {
                            "method": "post",
                            "url": "${context.rootUrl}/graphql",
                            "sendOn": "!!this.recordId",
                            "cache": 100,
                            "adaptor": "\n            if(payload.data.data){\n                var data = payload.data.data[0];\n                if(data){\n                    \n                    \n                    //初始化接口返回的字段移除字段值为null的字段\n                    for (key in data){\n                        if(data[key] === null){\n                            delete data[key];\n                        }\n                    }\n                };\n                payload.data = data;\n                delete payload.extensions;\n            }\n    payload.data.fields = payload.data.instance_fields;        return payload;\n        ",
                            "data": {
                              "query": "{data:flows(filters:[\"_id\", \"=\", \"${recordId}\"]){_id,company_id,name,api_name,form,category,state,is_valid,current_no,description,help_text,created_by,modified_by,current,perms,object_name,instance_fields,instance_table_fields,instance_template,print_template,field_map,events,auto_remind,sort_no,timeout_auto_submit,allow_select_step,created,modified,instance_state,_display:_ui{company_id,form,category,state,is_valid,current_no,created_by,modified_by,object_name,auto_remind,sort_no,timeout_auto_submit,allow_select_step,created,modified,instance_state}, \n    recordPermissions: _permissions{\n        allowCreate,\n        allowCreateFiles,\n        allowDelete,\n        allowDeleteFiles,\n        allowEdit,\n        allowEditFiles,\n        allowRead,\n        allowReadFiles,\n        disabled_actions,\n        disabled_list_views,\n        field_permissions,\n        modifyAllFiles,\n        modifyAllRecords,\n        modifyAssignCompanysRecords,\n        modifyCompanyRecords,\n        uneditable_fields,\n        unreadable_fields,\n        unrelated_objects,\n        viewAllFiles,\n        viewAllRecords,\n        viewAssignCompanysRecords,\n        viewCompanyRecords,\n      }\n    }}"
                            },
                            "headers": {
                              "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                            }
                          },
                          "api": {
                            "method": "post",
                            "url": "${context.rootUrl}/am/forms/addFieldsFromObject",
                            "data": {
                              "objectName": "${objectName}",
                              "$": "$$",
                              "recordId": "${recordId}"
                            },
                            "requestAdaptor": "api.data={formId: api.body.$.form, instance_table_fields: api.body.$.instance_table_fields, instance_fields: api.body.$.fields, object_name: api.body.$.object_name}",
                            "responseData": {
                              "recordId": "${record._id}"
                            },
                            "adaptor": "\n            if(payload.errors){\n                payload.status = 2;\n                payload.msg = payload.errors[0].message;\n            }\n            return payload;\n        ",
                            "headers": {
                              "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                            }
                          }
                        }
                      ],
                      "id": "u:836df7acd992"
                    }
                  }
                ],
                "weight": 0
              }
            }
          }
        ],
        "regions": ["body"],
        "data": {
        },
        "bodyClassName": "p-0",
        "id": "u:21e113447386"
      }


    is_enable: true
    type: amis_button
    visible: true
relatedList:
  - cms_files
  - object_workflows
permission_set:
  user:
    allowCreate: false
    allowDelete: false
    allowEdit: false
    allowRead: true
    modifyAllRecords: false
    viewAllRecords: true
  admin:
    allowCreate: true
    allowDelete: false
    allowEdit: true
    allowRead: true
    modifyAllRecords: true
    viewAllRecords: true
  workflow_admin:
    allowCreate: true
    allowDelete: false
    allowEdit: true
    allowRead: true
    modifyAllRecords: false
    viewAllRecords: false
    modifyCompanyRecords: true
    viewCompanyRecords: true
    disabled_list_views: []
    disabled_actions: []
    unreadable_fields: []
    uneditable_fields: []
    unrelated_objects: []
