{"version":3,"sources":["meteor://💻app/packages/steedos:cfs-steedos-cloud/checkNpm.js","meteor://💻app/packages/steedos:cfs-steedos-cloud/s3.server.js","meteor://💻app/packages/steedos:cfs-steedos-cloud/s3.upload.stream2.js"],"names":["checkNpmVersions","module","link","v","fs","require","path","Meteor","settings","public","cfs","store","CLOUDAWS","_objectSpread","default","validS3ServiceParamKeys","validS3PutParamKeys","FS","Store","STEEDOSCLOUD","name","opts","self","Error","options","s3ForcePathStyle","folder","length","slice","steedosBucket","bucket","join","defaultAcl","ACL","SteedosApiKey","secretAccessKey","serviceParams","Utility","extend","Bucket","region","accessKeyId","S3","StorageAdapter","typeName","fileKey","fileObj","info","_getInfo","key","filename","filenameInStore","collectionName","_id","createReadStream","Key","createWriteStream","contentType","ContentType","aliases","metadata","remove","callback","deleteObjectReq","deleteObject","on","httpRequest","headers","send","error","watch","Writable","prototype","params","getObjectReq","getObject","writeStream","highWaterMark","partNumber","parts","receivedSize","uploadedSize","currentChunk","Buffer","maxChunkSize","multipartUploadID","waitingCallback","runWhenReady","_write","chunk","enc","next","concat","flushChunk","_originalEnd","end","encoding","call","debug","console","log","abortMultipartUploadReq","abortMultipartUpload","UploadId","err","lastChunk","uploadingChunk","copy","localChunkNumber","uploadPartReq","uploadPart","Body","PartNumber","result","emit","ETag","_writableState","ended","completeMultipartUploadReq","completeMultipartUpload","MultipartUpload","Parts","size","storedAt","Date","createMultipartUploadReq","createMultipartUpload","data"],"mappings":"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","file":"/packages/steedos_cfs-steedos-cloud.js","sourcesContent":["/*\n * @Author: sunhaolin@hotoa.com\n * @Date: 2021-08-13 22:02:02\n * @LastEditors: sunhaolin@hotoa.com\n * @LastEditTime: 2022-08-24 16:29:49\n * @Description: \n */\nimport {\n  checkNpmVersions\n} from 'meteor/tmeasday:check-npm-versions';\n\nconst fs = require('fs');\nconst path = require('path')\n\nif (Meteor.settings && Meteor.settings.public && Meteor.settings.public.cfs && Meteor.settings.public.cfs.store === 'STEEDOSCLOUD') {\n  checkNpmVersions({\n    'aws-sdk': \"^2.0.23\"\n  }, 'steedos:cfs-steedos-cloud');\n\n  // // 修改s3-2006-03-01.min.json 将 SteedosApiKey添加进members用于请求时aws-sdk发送此header\n  // var base = process.cwd();\n  // console.log('process.cwd(): ', process.cwd());\n  // if (process.env.CREATOR_NODE_ENV == 'development') {\n  //   base = path.resolve('.').split('.meteor')[0];\n  // }\n  // console.log('base: ', base);\n  // var sdkPath = path.join(base, require.resolve('aws-sdk/package.json', {\n  //   paths: [base]\n  // }));\n  // console.log('sdkPath: ', sdkPath);\n  // var sdkVersionMinJsonPath = path.join(sdkPath, '../apis/s3-2006-03-01.min.json');\n  // console.log('sdkVersionMinJsonPath: ', sdkVersionMinJsonPath);\n  // var minJson = JSON.parse(fs.readFileSync(sdkVersionMinJsonPath));\n  // console.log(minJson);\n  // var operations = minJson.operations;\n  // for (const key in operations) {\n  //   if (Object.hasOwnProperty.call(operations, key)) {\n  //     const element = operations[key];\n  //     if (element.input) {\n  //       element.input.members.SteedosApiKey = { \"location\": \"header\", \"locationName\": \"apikey\" }\n  //     }\n  //   }\n  // }\n\n  // fs.writeFileSync(sdkVersionMinJsonPath, JSON.stringify(minJson)); \n\n  CLOUDAWS = require('aws-sdk');\n}\n","if (!CLOUDAWS)\n  return;\n\nconst path = require('path');\n\n// We use the official aws sdk\n\n\nvar validS3ServiceParamKeys = [\n  'endpoint',\n  'accessKeyId',\n  'secretAccessKey',\n  'sessionToken',\n  'credentials',\n  'credentialProvider',\n  'region',\n  'maxRetries',\n  'maxRedirects',\n  'sslEnabled',\n  'paramValidation',\n  'computeChecksums',\n  's3ForcePathStyle',\n  'httpOptions',\n  'apiVersion',\n  'apiVersions',\n  'logger',\n  'signatureVersion'\n];\nvar validS3PutParamKeys = [\n  'ACL',\n  'Body',\n  'Bucket',\n  'CacheControl',\n  'ContentDisposition',\n  'ContentEncoding',\n  'ContentLanguage',\n  'ContentLength',\n  'ContentMD5',\n  'ContentType',\n  'Expires',\n  'GrantFullControl',\n  'GrantRead',\n  'GrantReadACP',\n  'GrantWriteACP',\n  'Key',\n  'Metadata',\n  'ServerSideEncryption',\n  'StorageClass',\n  'WebsiteRedirectLocation'\n];\n\n/**\n * @public\n * @constructor\n * @param {String} name - The store name\n * @param {Object} options\n * @param {String} options.region - Bucket region\n * @param {String} options.steedosBucket - Bucket name\n * @param {String} [options.accessKeyId] - AWS IAM key; required if not set in environment variables\n * @param {String} [options.secretAccessKey] - AWS IAM secret; required if not set in environment variables\n * @param {String} [options.ACL='private'] - ACL for objects when putting\n * @param {String} [options.folder='/'] - Which folder (key prefix) in the bucket to use\n * @param {Function} [options.beforeSave] - Function to run before saving a file from the server. The context of the function will be the `FS.File` instance we're saving. The function may alter its properties.\n * @param {Number} [options.maxTries=5] - Max times to attempt saving a file\n * @returns {FS.StorageAdapter} An instance of FS.StorageAdapter.\n *\n * Creates an S3 store instance on the server. Inherits from FS.StorageAdapter\n * type.\n */\nFS.Store.STEEDOSCLOUD = function (name, opts) {\n  var self = this;\n  if (!(self instanceof FS.Store.STEEDOSCLOUD))\n    throw new Error('FS.Store.STEEDOSCLOUD missing keyword \"new\"');\n\n  opts = opts || {};\n  var options = {\n    ...opts\n  }\n  options.s3ForcePathStyle = true;\n\n  // Determine which folder (key prefix) in the bucket to use\n  var folder = options.folder;\n  if (typeof folder === \"string\" && folder.length) {\n    if (folder.slice(0, 1) === \"/\") {\n      folder = folder.slice(1);\n    }\n    if (folder.slice(-1) !== \"/\") {\n      folder += \"/\";\n    }\n  } else {\n    folder = \"\";\n  }\n\n  var steedosBucket = options.steedosBucket || 's3-kong-servie';\n  var bucket = options.bucket;\n  if (!bucket)\n    throw new Error('FS.Store.STEEDOSCLOUD you must specify the \"bucket\" option');\n\n  // 拼接folder\n  options.folder = path.join(bucket, folder, '/');\n  folder = options.folder;\n  delete options.bucket;\n\n  var defaultAcl = options.ACL || 'private';\n\n  var SteedosApiKey = options.secretAccessKey;\n\n  // Remove serviceParams from SA options\n  // options = _.omit(options, validS3ServiceParamKeys);\n\n  var serviceParams = FS.Utility.extend({\n    Bucket: steedosBucket,\n    region: null, //required\n    accessKeyId: null, //required\n    secretAccessKey: null, //required\n    ACL: defaultAcl\n  }, options);\n\n  // Whitelist serviceParams, else aws-sdk throws an error\n  // XXX: I've commented this at the moment... It stopped things from working\n  // we have to check up on this\n  // serviceParams = _.pick(serviceParams, validS3ServiceParamKeys);\n\n  // Create S3 service\n  var S3 = new CLOUDAWS.S3(serviceParams);\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: 'storage.s3',\n    fileKey: function (fileObj) {\n      // Lookup the copy\n      var info = fileObj && fileObj._getInfo(name);\n      // If the store and key is found return the key\n      if (info && info.key) return info.key;\n\n      var filename = fileObj.name();\n      var filenameInStore = fileObj.name({\n        store: name\n      });\n\n      // If no store key found we resolve / generate a key\n      return fileObj.collectionName + '/' + fileObj.collectionName + \"-\" + fileObj._id + '-' + (filenameInStore || filename);\n    },\n    createReadStream: function (fileKey, options) {\n      // console.log('S3.createReadStream...........: ', fileKey, options);\n\n      return S3.createReadStream({\n        Bucket: steedosBucket,\n        Key: folder + fileKey,\n      }, {}, SteedosApiKey);\n\n    },\n    // Comment to documentation: Set options.ContentLength otherwise the\n    // indirect stream will be used creating extra overhead on the filesystem.\n    // An easy way if the data is not transformed is to set the\n    // options.ContentLength = fileObj.size ...\n    createWriteStream: function (fileKey, options) {\n      options = options || {};\n\n      if (options.contentType) {\n        options.ContentType = options.contentType;\n      }\n\n      // We dont support array of aliases\n      delete options.aliases;\n      // We dont support contentType\n      delete options.contentType;\n      // We dont support metadata use Metadata?\n      delete options.metadata;\n\n      // Set options\n      var options = FS.Utility.extend({\n        Bucket: steedosBucket,\n        Key: folder + fileKey,\n        fileKey: fileKey,\n        ACL: defaultAcl,\n      }, options);\n      // console.log('S3.createWriteStream...........: ', options);\n      return S3.createWriteStream(options, {}, SteedosApiKey);\n    },\n    remove: function (fileKey, callback) {\n      // console.log('S3.deleteObject...........: ', fileKey);\n\n      var deleteObjectReq = S3.deleteObject({\n        Bucket: steedosBucket,\n        Key: folder + fileKey,\n      });\n\n      deleteObjectReq.on('build', function () {\n        deleteObjectReq.httpRequest.headers['apikey'] = SteedosApiKey;\n      });\n      deleteObjectReq.send(function (error) {\n        callback(error, !error);\n      });\n\n\n      // callback(null, true);\n    },\n    watch: function () {\n      throw new Error(\"S3 storage adapter does not support the sync option\");\n    }\n  });\n};","if (!CLOUDAWS)\n  return;\n\nvar Writable = require('stream').Writable;\n\n// This is based on the code from\n// https://github.com/nathanpeck/s3-upload-stream/blob/master/lib/s3-upload-stream.js\n// But much is rewritten and adapted to cfs\n\nCLOUDAWS.S3.prototype.createReadStream = function (params, options, SteedosApiKey) {\n  // Simple wrapper\n  // return this.getObject(params).createReadStream();\n\n  var getObjectReq = this.getObject(params);\n  getObjectReq.on('build', function () {\n    getObjectReq.httpRequest.headers['apikey'] = SteedosApiKey;\n  });\n  return getObjectReq.createReadStream();\n};\n\n// Extend the AWS.S3 API\nCLOUDAWS.S3.prototype.createWriteStream = function (params, options, SteedosApiKey) {\n  var self = this;\n\n  //Create the writeable stream interface.\n  var writeStream = Writable({\n    highWaterMark: 4194304 // 4 MB\n  });\n\n  var partNumber = 1;\n  var parts = [];\n  var receivedSize = 0;\n  var uploadedSize = 0;\n  var currentChunk = Buffer(0);\n  var maxChunkSize = 5242880;\n  var multipartUploadID = null;\n  var waitingCallback;\n  var fileKey = params && (params.fileKey || params.Key);\n\n  // Clean up for AWS sdk\n  delete params.fileKey;\n\n  // This small function stops the write stream until we have connected with\n  // the s3 server\n  var runWhenReady = function (callback) {\n    // If we dont have a upload id we are not ready\n    if (multipartUploadID === null) {\n      // We set the waiting callback\n      waitingCallback = callback;\n    } else {\n      // No problem - just continue\n      callback();\n    }\n  };\n\n  //Handler to receive data and upload it to S3.\n  writeStream._write = function (chunk, enc, next) {\n    currentChunk = Buffer.concat([currentChunk, chunk]);\n\n    // If the current chunk buffer is getting to large, or the stream piped in\n    // has ended then flush the chunk buffer downstream to S3 via the multipart\n    // upload API.\n    if (currentChunk.length > maxChunkSize) {\n      // Make sure we only run when the s3 upload is ready\n      runWhenReady(function () { flushChunk(next, false); });\n    } else {\n      // We dont have to contact s3 for this\n      runWhenReady(next);\n    }\n  };\n\n  // Overwrite the end method so that we can hijack it to flush the last part\n  // and then complete the multipart upload\n  var _originalEnd = writeStream.end;\n  writeStream.end = function (chunk, encoding, callback) {\n    // Call the super\n    _originalEnd.call(this, chunk, encoding, function () {\n      // Make sure we only run when the s3 upload is ready\n      runWhenReady(function () { flushChunk(callback, true); });\n    });\n  };\n\n  writeStream.on('error', function () {\n    if (multipartUploadID) {\n      if (FS.debug) {\n        console.log('SA S3 - ERROR!!');\n      }\n      var abortMultipartUploadReq = self.abortMultipartUpload({\n        Bucket: params.Bucket,\n        Key: params.Key,\n        UploadId: multipartUploadID\n      });\n\n      abortMultipartUploadReq.on('build', function () {\n        abortMultipartUploadReq.httpRequest.headers['apikey'] = SteedosApiKey;\n      });\n      abortMultipartUploadReq.send(function (err) {\n        if (err) {\n          console.error('SA S3 - Could not abort multipart upload', err)\n        }\n      });\n\n    }\n  });\n\n  var flushChunk = function (callback, lastChunk) {\n    if (multipartUploadID === null) {\n      throw new Error('Internal error multipartUploadID is null');\n    }\n    // Get the chunk data\n    var uploadingChunk = Buffer(currentChunk.length);\n    currentChunk.copy(uploadingChunk);\n\n\n    // Store the current part number and then increase the counter\n    var localChunkNumber = partNumber++;\n\n    // We add the size of data\n    receivedSize += uploadingChunk.length;\n    // console.log('multipartUploadID: ', multipartUploadID);\n    // Upload the part\n    var uploadPartReq = self.uploadPart({\n      Body: uploadingChunk,\n      Bucket: params.Bucket,\n      Key: params.Key,\n      UploadId: multipartUploadID,\n      PartNumber: localChunkNumber\n    });\n\n    uploadPartReq.on('build', function () {\n      uploadPartReq.httpRequest.headers['apikey'] = SteedosApiKey;\n    });\n    uploadPartReq.send(function (err, result) {\n      // Call the next data\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      if (err) {\n        writeStream.emit('error', err);\n      } else {\n        // Increase the upload size\n        uploadedSize += uploadingChunk.length;\n        parts[localChunkNumber - 1] = {\n          ETag: result.ETag,\n          PartNumber: localChunkNumber\n        };\n\n        // XXX: event for debugging\n        writeStream.emit('chunk', {\n          ETag: result.ETag,\n          PartNumber: localChunkNumber,\n          receivedSize: receivedSize,\n          uploadedSize: uploadedSize\n        });\n\n        // The incoming stream has finished giving us all data and we have\n        // finished uploading all that data to S3. So tell S3 to assemble those\n        // parts we uploaded into the final product.\n        if (writeStream._writableState.ended === true &&\n          uploadedSize === receivedSize && lastChunk) {\n          // Complete the upload\n          var completeMultipartUploadReq = self.completeMultipartUpload({\n            Bucket: params.Bucket,\n            Key: params.Key,\n            UploadId: multipartUploadID,\n            MultipartUpload: {\n              Parts: parts\n            }\n          });\n\n          completeMultipartUploadReq.on('build', function () {\n            completeMultipartUploadReq.httpRequest.headers['apikey'] = SteedosApiKey;\n          });\n          completeMultipartUploadReq.send(function (err, result) {\n            if (err) {\n              writeStream.emit('error', err);\n            } else {\n              // Emit the cfs end event for uploads\n              if (FS.debug) {\n                console.log('SA S3 - DONE!!');\n              }\n              writeStream.emit('stored', {\n                fileKey: fileKey,\n                size: uploadedSize,\n                storedAt: new Date()\n              });\n            }\n\n          });\n\n        }\n      }\n    });\n\n    // Reset the current buffer\n    currentChunk = Buffer(0);\n  };\n\n  //Use the S3 client to initialize a multipart upload to S3.\n  var createMultipartUploadReq = self.createMultipartUpload(params);\n  createMultipartUploadReq.on('build', function () {\n    createMultipartUploadReq.httpRequest.headers['apikey'] = SteedosApiKey;\n  });\n  createMultipartUploadReq.send(function (err, data) {\n    if (err) {\n      // Emit the error\n      writeStream.emit('error', err);\n    } else {\n      // Set the upload id\n      // console.log('data.UploadId: ', data.UploadId);\n      multipartUploadID = data.UploadId;\n\n      // Call waiting callback\n      if (typeof waitingCallback === 'function') {\n        // We call the waiting callback if any now since we established a\n        // connection to the s3\n        waitingCallback();\n      }\n\n    }\n  });\n\n  // We return the write stream\n  return writeStream;\n};\n"]}