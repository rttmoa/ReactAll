<!--
 * @Author: baozhoutao@steedos.com
 * @Date: 2022-06-02 17:45:15
 * @LastEditors: baozhoutao@steedos.com
 * @LastEditTime: 2023-04-04 16:02:16
 * @Description: 
-->
<html>
  <head>
    <script src="/unpkg.com/@steedos-builder/fiddle@0.0.5/dist/builder-fiddle.umd.js"></script>
    <script src="/unpkg.com/axios@0.26.1/dist/axios.min.js"></script>
  </head>

  <body>
    <builder-fiddle host="<%=builderHost%>"></builder-fiddle>
    <script>
      const settings = {
        assetUrls: "<%=assetUrls%>",
        rootUrl: "<%=rootUrl%>",
        userId: "<%=userId%>",
        tenantId: "<%=tenantId%>",
        authToken: "<%=authToken%>",
        pageId: "<%=pageId%>",
        messageOnly: true,
      };

      let comp = document.querySelector("builder-fiddle");

      const loadPage = async () => {
        const { assetUrls, rootUrl, userId, tenantId, authToken, pageId } = settings;

        // 如果传入 steedos rooturl
        if (rootUrl && !authToken) return;

        const initialContent = {
          type: "page",
          title: "Welcome to Steedos",
          body: [],
          regions: ["body"],
          data: {
            objectName: "space_users",
            recordId: "",
            initialValues: {},
            appId: "builder",
            title: "",
            context: {
              rootUrl,
              userId,
              tenantId,
              authToken,
            },
          },
        };

        if (pageId) {
          const result = await axios.get(
            `${rootUrl}/service/api/page/pageVersion/${pageId}/latest/`,
            {
              withCredentials: true,
              headers: { Authorization: `Bearer ${tenantId},${authToken}` },
            }
          );
          if (result?.data) {
            let schema = result.data.schema || initialContent;

            let objectName = result.data.object_name;
            let pageType = result.data.type;
            if (typeof schema === "string") {
              schema = JSON.parse(schema);
            }

            if (!schema.data) {
              schema.data = {};
            }

            if (!schema.data.context) {
              schema.data.context = {};
            }

            schema.data.objectName = objectName;

            schema.data.context.rootUrl = rootUrl;
            schema.data.context.tenantId = tenantId;
            schema.data.context.userId = userId;
            schema.data.context.authToken = authToken;

            if (objectName && pageType === "record") {
              const record = await axios.get(
                `${rootUrl}/api/v4/${objectName}?$orderby=modified&$top=1`,
                {
                  withCredentials: true,
                  headers: { Authorization: `Bearer ${tenantId},${authToken}` },
                }
              );
              const value = record?.data?.value;
              if (value?.length > 0) {
                schema.data.recordId = value[0]._id;
              }
            }

            return schema || initialContent
          }
        } else {
          return initialContent
        }
      };

      const savePage = async (data) => {
        const { rootUrl, userId, tenantId, authToken, pageId } = settings;

        if (!pageId) {
          return;
        }

        // 保存schema时,清理context下的认证信息
        const schema = JSON.parse(
          JSON.stringify(data.data.AmisSchema, null, 4)
        );
        if (schema.data && typeof schema.data.context === 'object' ) {
          delete schema.data.context.userId;
          delete schema.data.context.tenantId;
          delete schema.data.context.authToken;
          delete schema.data.context.user;
          delete schema.data.context.rootUrl;
        }
        return await axios.put(
            `${rootUrl}/service/api/page/pageVersion/${pageId}`,
            {
              withCredentials: true,
              schema: JSON.stringify(schema, null, 4), //直接存储json格式会导致react form异常。
            },
            {
              headers: { Authorization: `Bearer ${tenantId},${authToken}` },
            }
          )
          .catch(function (error) {
            // handle error
            console.log(error);
          });
      };

      const deployPageVersion = async () => {
        const { rootUrl, tenantId, authToken, pageId } = settings;

        if (!pageId) {
          return;
        }
        return axios
          .post(
            `${rootUrl}/service/api/page/deploy`,
            {
              withCredentials: true,
              pageId: pageId,
            },
            {
              headers: { Authorization: `Bearer ${tenantId},${authToken}` },
            }
          )
          .then(function (response) {
            //保存时, 刷新父页面
            if (window.opener) {
              window.opener.postMessage(
                Object.assign(
                  { type: "record.edited" },
                  { objectName: "pages" },
                  { record: {} }
                ),
                "*"
              );
            }
          })
          .catch(function (error) {
            // handle error
            console.log(error);
          });
      };
      window.addEventListener('message', function (event) {
        const { data } = event;
        if (data) {
          if (data.type === 'builder.loadContent') {
            loadPage().then((content)=>{
              comp.messageFrame('builder.contentChanged', { AmisSchema : content } )
            })
          }
          if (data.type === 'builder.saveContent') {
            savePage(data.data).then(()=>{
              comp.messageFrame('builder.contentSaved')
            })
          }
          if(data.type === "builder.deployContent"){
            deployPageVersion().then(()=>{
              comp.messageFrame('builder.contentDeployed')
            })
          }
        }
      })
    
      comp.settings = settings;
    </script>
  </body>
</html>
