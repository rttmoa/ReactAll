{
    "type": "page",
    "body": [
        {
            "type": "form",
            "mode": "normal",
            "persistData": false,
            "promptPageLeave": true,
            "name": "form_edit_${recordId}",
            "title": "",
            "api": {
                "method": "post",
                "url": "${context.rootUrl}/graphql",
                "data": {
                    "objectName": "${objectName}",
                    "$": "$$",
                    "recordId": "${recordId}",
                    "modalName": "${modalName}"
                },
                "requestAdaptor": "\n        \n        const formData = api.data.$;\n        for (key in formData){\n            // image、select等字段清空值后保存的空字符串转换为null。\n            if(formData[key] === ''){\n                formData[key] = null;\n            }\n        }\n        const objectName = api.data.objectName;\n        const fieldsName = Object.keys(formData);\n        delete formData.created;\n        delete formData.created_by;\n        delete formData.modified;\n        delete formData.modified_by;\n        delete formData._display;\n        delete formData.sort_order_options;\n        delete formData.buttons_options;\n        delete formData.fields_options;\n        delete formData.field_groups_options;\n        delete formData.related_lists_options;\n        delete formData.related_object_fields_options;\n        delete formData.isLookup;\n\n        let query = `mutation{record: ${objectName}__insert(doc: {__saveData}){_id}}`;\n        if(formData.recordId){\n            query = `mutation{record: ${objectName}__update(id: \"${formData.recordId}\", doc: {__saveData}){_id}}`;\n        };\n        delete formData._id;\n        let __saveData = JSON.stringify(JSON.stringify(formData));\n    \n        api.data = {query: query.replace('{__saveData}', __saveData)};\n        return api;\n    ",
                "adaptor": "if (payload.errors) {\n    payload.status = 2;\n    payload.msg = window.t ? window.t(payload.errors[0].message) : payload.errors[0].message;\n}\nreturn payload;",
                "responseData": {
                    "recordId": "${record._id}"
                },
                "headers": {
                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                }
            },
            "initApi": {
                "method": "post",
                "url": "${context.rootUrl}/graphql",
                "cache": 100,
                "adaptor": "\n\nconst recordId = api.body.recordId;\nlet initialValues = {};\nif (recordId && payload.data.data) {\n    var data = payload.data.data[0];\n    const dataKeys = _.keys(data);\n    const uiSchema = api.body.uiSchema;\n    const fieldKeys = uiSchema && _.keys(uiSchema.fields);\n    if (data) {\n        _.each(dataKeys, function (key) {\n            if (fieldKeys.indexOf(key) < 0) {\n                delete data[key];\n            }\n        })\n\n        //初始化接口返回的字段移除字段值为null的字段\n        for (key in data) {\n            if (data[key] === null) {\n                delete data[key];\n            }\n        }\n    };\n    initialValues = data;\n}\nelse {\n    var uiSchema = api.body.uiSchema;\n    var defaultData = api.body.defaultData;\n    var defaultValues = {};\n    _.each(uiSchema?.fields, function (field) {\n        var value = SteedosUI.getFieldDefaultValue(field, api.body.global);\n        if (value) {\n            defaultValues[field.name] = value;\n        }\n    });\n    if (defaultData && _.isObject(defaultData) && !_.isArray(defaultData)) {\n        defaultValues = Object.assign({}, defaultValues, defaultData)\n    }\n    if (uiSchema.form) {\n        try {\n            var objectFormConfig = JSON.parse(uiSchema.form);\n            initialValues = objectFormConfig.initialValues;\n            if (initialValues) {\n                initialValues = new Function(\"return \" + initialValues)();\n            }\n            if (typeof initialValues === \"function\") {\n                initialValues = initialValues.apply({ doc: defaultValues || {} })\n            }\n        }\n        catch (ex) {\n            console.warn(ex);\n        }\n    }\n    if (_.isObject(initialValues)) {\n        // uiSchema.form.initialValues为函数且执行后为json，则优先取initialValues中的默认值\n        initialValues = Object.assign({}, defaultValues, initialValues);\n    }\n    else {\n        initialValues = defaultValues;\n    }\n}\n\npayload.data = initialValues;\ndelete payload.extensions;\nreturn payload;\n",
                "data": {
                    "recordId": "${recordId}",
                    "defaultData": "${defaultData}",
                    "query": "{data:object_layouts(filters:[\"_id\", \"=\", \"${recordId}\"]){_id,name,label,object_name,profiles,buttons,fields,related_lists,field_groups,is_system,created,created_by,modified,modified_by,instances,instance_state,_display:_ui{object_name,profiles,buttons,fields,related_lists,is_system,created,created_by,modified,modified_by,instances,instance_state}}}",
                    "uiSchema": "${uiSchema}",
                    "objectName": "${objectName}"
                },
                "headers": {
                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                },
                "requestAdaptor": "\n// 所有不想在network请求中发送的数据都应该从data中分离出来，data变量只需要留下query才需要发送出去\nvar { recordId, objectName, uiSchema, global, context, ...data } = api.data;\nif (!recordId) {\n  // 新建则不请求任何数据\n  data.query = \"{data:\" + objectName + \"(filters: \" + JSON.stringify([\"_id\", \"=\", null]) + \", top: 1){_id}}\";\n}\napi.data = data;\nreturn api;"
            },
            "initFetch": true,
            "body": [
                {
                    "type": "tabs",
                    "tabs": [
                        {
                            "title": "基本信息",
                            "body": [
                                {
                                    "type": "wrapper",
                                    "className": "form-content",
                                    "body": [
                                        {
                                            "name": "name",
                                            "label": "API 名称",
                                            "required": true,
                                            "type": "input-text",
                                            "className": "col-span-2 m-0",
                                            "labelClassName": "text-left",
                                            "id": "u:211102f479e9"
                                        },
                                        {
                                            "name": "label",
                                            "label": "页面布局名",
                                            "required": true,
                                            "type": "input-text",
                                            "className": "col-span-2 m-0",
                                            "labelClassName": "text-left",
                                            "id": "u:1b3e658c6a5e"
                                        },
                                        {
                                            "name": "object_name",
                                            "label": "对象",
                                            "required": true,
                                            "type": "select",
                                            "joinValues": false,
                                            "extractValue": true,
                                            "labelField": "label",
                                            "valueField": "value",
                                            "className": "m-0",
                                            "labelClassName": "text-left",
                                            "en-US": {
                                                "label": "Object"
                                            },
                                            "checkAll": false,
                                            "searchable": true,
                                            "id": "u:4e769995f638",
                                            "source": {
                                                "method": "get",
                                                "url": "${context.rootUrl}/service/api/amis-metadata-objects/objects/options",
                                                "headers": {
                                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                }
                                            },
                                            "multiple": false
                                        },
                                        {
                                            "name": "profiles",
                                            "label": "简档",
                                            "required": true,
                                            "type": "select",
                                            "joinValues": false,
                                            "extractValue": true,
                                            "labelField": "label",
                                            "multiple": true,
                                            "className": "m-0",
                                            "labelClassName": "text-left",
                                            "checkAll": true,
                                            "source": {
                                                "method": "post",
                                                "url": "${context.rootUrl}/graphql",
                                                "data": {
                                                    "query": "{options:permission_set(filters: [\"type\", \"=\", \"profile\"]){name,label}}"
                                                },
                                                "requestAdaptor": "",
                                                "adaptor": "",
                                                "headers": {
                                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                }
                                            },
                                            "valueField": "name",
                                            "searchable": true,
                                            "id": "u:3c65447a8a6e",
                                            "defaultCheckAll": false,
                                            "checkAllLabel": "全选"
                                        }
                                    ],
                                    "size": "none",
                                    "id": "u:ce73f365fafa"
                                }
                            ],
                            "id": "u:c7b26b220195"
                        },
                        {
                            "title": "按钮",
                            "body": [
                                {
                                    "type": "wrapper",
                                    "body": [
                                        {
                                            "type": "service",
                                            "body": [
                                                {
                                                    "name": "buttons",
                                                    "label": "按钮",
                                                    "type": "crud",
                                                    "strictMode": true,
                                                    "affixHeader": false,
                                                    "editable": true,
                                                    "addable": false,
                                                    "removable": true,
                                                    "draggable": false,
                                                    "columns": [
                                                        {
                                                            "name": "index",
                                                            "label": "序号",
                                                            "type": "static",
                                                            "value": "${index + 1}",
                                                            "className": "w-10",
                                                            "id": "u:c59784421c37"
                                                        },
                                                        {
                                                            "name": "button_name_label",
                                                            "label": "名称",
                                                            "type": "tpl",
                                                            "tpl": "${buttons_options|filter:value:equals:button_name|pick:label}",
                                                            "id": "u:302f8fadccd3"
                                                        },
                                                        {
                                                            "name": "visible_on",
                                                            "label": "显示条件",
                                                            "className": "w-6/12",
                                                            "quickEdit": {
                                                                "type": "input-text",
                                                                "className": "m-0",
                                                                "labelClassName": "text-left",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 按钮列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForButton = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input.__super;\n  const formValue = input.__super.__super.__super;\n  const button_name = rowValue.button_name;\n  rowValue[prop_name] = currentPropValue;\n  let newButtons = formValue.buttons.map(function (item) {\n    if (item.button_name == button_name) {\n      return Object.assign({}, item, rowValue);\n    }\n    else {\n      return item;\n    }\n  });\n  return {\n    buttons: newButtons\n  }\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForButton(eventData, \"visible_on\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "tpl": "<b><%=data.visible_on%></b>",
                                                                "name": "visible_on",
                                                                "id": "u:daa771bd34b9",
                                                                "mode": "popOver"
                                                            },
                                                            "id": "u:3c35211aa1a0",
                                                            "placeholder": "-"
                                                        }
                                                    ],
                                                    "className": "col-span-2 m-0",
                                                    "labelClassName": "text-left",
                                                    "footable": false,
                                                    "headerToolbar": [
                                                        {
                                                            "type": "button",
                                                            "actionType": "dialog",
                                                            "dialog": {
                                                                "title": "设置按钮",
                                                                "body": [
                                                                    {
                                                                        "type": "transfer",
                                                                        "name": "picked_buttons",
                                                                        "sortable": true,
                                                                        "source": "${buttons_options}",
                                                                        "value": "${buttons|pick:button_name}",
                                                                        "searchable": true,
                                                                        "id": "u:d6e067c40e83"
                                                                    }
                                                                ],
                                                                "onEvent": {
                                                                    "confirm": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 清空主表单buttons字段值\nconst clearButtons = function (input) {\n  return {\n    buttons: []\n  }\n}\n\n// 把”设置按钮“弹出窗口中设置的按钮转为主表单buttons字段值格式\nconst convertDataForButtons = function (input) {\n  let pickedButtons = input.picked_buttons || [];\n  const superButtons = _.keyBy(input.__super.buttons, 'button_name');\n  if (typeof pickedButtons === \"string\") {\n    pickedButtons = pickedButtons.split(\",\");\n  }\n  const convertedButtons = pickedButtons.map(function (key) {\n    return superButtons[key] || {\n      button_name: key\n    }\n  });\n  return {\n    buttons: convertedButtons\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: clearButtons()\n  }\n});\n\nsetTimeout(function () {\n  doAction({\n    actionType: 'setValue',\n    componentId: \"object-layout-form\",\n    args: {\n      value: convertDataForButtons(eventData)\n    }\n  });\n}, 300);\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "type": "dialog",
                                                                "id": "u:a0027ac6f8c1",
                                                                "closeOnEsc": false,
                                                                "closeOnOutside": false,
                                                                "showCloseButton": true,
                                                                "size": "md"
                                                            },
                                                            "label": "设置按钮",
                                                            "id": "u:1ac8afc8a9bb"
                                                        }
                                                    ],
                                                    "source": "${buttons}",
                                                    "id": "u:a5d43b752494"
                                                }
                                            ],
                                            "id": "u:bef2e378d96f",
                                            "api": {
                                                "method": "get",
                                                "url": "${context.rootUrl}/service/api/amis-metadata-objects/objects/${object_name}/actions/options",
                                                "adaptor": "let data = payload.data;\ndata.buttons_options = data.options;\ndelete data.options\npayload.data = data;\nreturn payload;\n",
                                                "sendOn": "!!this.object_name",
                                                "headers": {
                                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                }
                                            },
                                            "className": "col-span-2 m-0",
                                            "affixFooter": false,
                                            "messages": {}
                                        }
                                    ],
                                    "size": "none",
                                    "id": "u:100edb4c59d0"
                                }
                            ],
                            "id": "u:2a10c03c2218"
                        },
                        {
                            "title": "字段",
                            "body": [
                                {
                                    "type": "wrapper",
                                    "body": [
                                        {
                                            "type": "service",
                                            "body": [
                                                {
                                                    "name": "fields",
                                                    "required": true,
                                                    "type": "crud",
                                                    "strictMode": true,
                                                    "affixHeader": false,
                                                    "editable": true,
                                                    "addable": false,
                                                    "removable": true,
                                                    "draggable": false,
                                                    "columns": [
                                                        {
                                                            "name": "index",
                                                            "className": "w-10",
                                                            "label": "序号",
                                                            "type": "static",
                                                            "value": "${index + 1}",
                                                            "id": "u:d1c2922699d3"
                                                        },
                                                        {
                                                            "name": "field_name_label",
                                                            "label": "字段",
                                                            "type": "tpl",
                                                            "tpl": "${fields_options|filter:value:equals:field_name|pick:label}",
                                                            "id": "u:b95c69a1cd84"
                                                        },
                                                        {
                                                            "name": "is_readonly",
                                                            "label": "只读",
                                                            "quickEdit": {
                                                                "type": "checkbox",
                                                                "tpl": null,
                                                                "className": "m-0",
                                                                "labelClassName": "text-left",
                                                                "mode": "inline",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForField = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input.__super;\n  const formValue = input.__super.__super.__super;\n  const field_name = rowValue.field_name;\n  rowValue[prop_name] = currentPropValue;\n  let newFields = formValue.fields.map(function (item) {\n    if (item.field_name == field_name) {\n      return Object.assign({}, item, rowValue);\n    }\n    else {\n      return item;\n    }\n  });\n  const fieldGroups = input.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  newFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: newFields\n  }\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForField(eventData, \"is_readonly\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "id": "u:8cb44f3db16c",
                                                                "name": "is_readonly"
                                                            },
                                                            "id": "u:5081e6e1af55",
                                                            "placeholder": "-"
                                                        },
                                                        {
                                                            "name": "is_required",
                                                            "label": "必填",
                                                            "quickEdit": {
                                                                "mode": "inline",
                                                                "type": "checkbox",
                                                                "className": "m-0",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForField = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input.__super;\n  const formValue = input.__super.__super.__super;\n  const field_name = rowValue.field_name;\n  rowValue[prop_name] = currentPropValue;\n  let newFields = formValue.fields.map(function (item) {\n    if (item.field_name == field_name) {\n      return Object.assign({}, item, rowValue);\n    }\n    else {\n      return item;\n    }\n  });\n  const fieldGroups = input.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  newFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: newFields\n  }\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForField(eventData, \"is_required\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "tpl": null,
                                                                "labelClassName": "text-left",
                                                                "id": "u:bbd1c15b6504",
                                                                "name": "is_required"
                                                            },
                                                            "id": "u:e54afb5cc05c",
                                                            "placeholder": "-"
                                                        },
                                                        {
                                                            "name": "group",
                                                            "label": "分组",
                                                            "quickEdit": {
                                                                "type": "select",
                                                                "className": "m-0",
                                                                "source": "${field_groups|pick:group_name}",
                                                                "checkAll": false,
                                                                "selectFirst": false,
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForField = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input.__super;\n  const formValue = input.__super.__super.__super;\n  const field_name = rowValue.field_name;\n  rowValue[prop_name] = currentPropValue;\n  let newFields = formValue.fields.map(function (item) {\n    if (item.field_name == field_name) {\n      return Object.assign({}, item, rowValue);\n    }\n    else {\n      return item;\n    }\n  });\n  const fieldGroups = input.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  newFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: newFields\n  }\n}\n\nconst eventData = event.data;\n\n// 清空主表单fields字段值\nconst clearFields = function (input) {\n  return {\n    fields: []\n  }\n}\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: clearFields()\n  }\n});\nsetTimeout(function () {\n  doAction({\n    actionType: 'setValue',\n    componentId: \"object-layout-form\",\n    args: {\n      value: quickEidtSaveForField(eventData, \"group\")\n    }\n  });\n}, 300);\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "searchable": true,
                                                                "clearable": true,
                                                                "name": "group",
                                                                "id": "u:f75ddc45d296",
                                                                "multiple": false,
                                                                "mode": "popOver"
                                                            },
                                                            "id": "u:e532b1949676",
                                                            "placeholder": "-"
                                                        },
                                                        {
                                                            "name": "visible_on",
                                                            "label": "显示条件",
                                                            "quickEdit": {
                                                                "type": "input-text",
                                                                "tpl": "<b><%=data.visible_on%></b>",
                                                                "className": "m-0",
                                                                "labelClassName": "text-left",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForField = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input.__super;\n  const formValue = input.__super.__super.__super;\n  const field_name = rowValue.field_name;\n  rowValue[prop_name] = currentPropValue;\n  let newFields = formValue.fields.map(function (item) {\n    if (item.field_name == field_name) {\n      return Object.assign({}, item, rowValue);\n    }\n    else {\n      return item;\n    }\n  });\n  const fieldGroups = input.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  newFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: newFields\n  }\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForField(eventData, \"visible_on\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "name": "visible_on",
                                                                "id": "u:624913811ecc",
                                                                "minRows": 3,
                                                                "maxRows": 20,
                                                                "mode": "popOver"
                                                            },
                                                            "breakpoint": "*",
                                                            "id": "u:e3618b8b4c52",
                                                            "placeholder": "-"
                                                        }
                                                    ],
                                                    "className": "col-span-2 m-0",
                                                    "labelClassName": "text-left",
                                                    "source": "${fields}",
                                                    "footable": false,
                                                    "headerToolbar": [
                                                        {
                                                            "type": "button",
                                                            "actionType": "dialog",
                                                            "dialog": {
                                                                "title": "设置字段",
                                                                "body": [
                                                                    {
                                                                        "type": "transfer",
                                                                        "name": "picked_fields",
                                                                        "sortable": true,
                                                                        "source": "${fields_options}",
                                                                        "value": "${fields|pick:field_name}",
                                                                        "searchable": true,
                                                                        "id": "u:502c4ecd81b6"
                                                                    }
                                                                ],
                                                                "onEvent": {
                                                                    "confirm": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 清空主表单fields字段值\nconst clearFields = function (input) { \n  return {\n    fields: []\n  }\n}\n\n// 把”设置字段“弹出窗口中设置的字段转为主表单fields字段值格式\nconst convertDataForFields = function (input) {\n  let pickedFields = input.picked_fields || [];\n  const superFields = _.keyBy(input.__super.fields, 'field_name');\n  if (typeof pickedFields === \"string\") {\n    pickedFields = pickedFields.split(\",\");\n  }\n  const fieldOptions = lodash.keyBy(input.__super.__super.__super.__super.__super.fields_options, \"value\");\n  const convertedFields = pickedFields.map(function (field_name) {\n    const superField = superFields[field_name];\n    if (superField) {\n      return superField;\n    }\n    else {\n      const fieldOption = fieldOptions[field_name];\n      return {\n        field_name: field_name,\n        is_readonly: fieldOption.readonly,\n        is_required: fieldOption.required,\n        group: fieldOption.group\n      }\n    }\n  });\n  const fieldGroups = input.__super.__super.__super.__super.__super.field_groups;\n  const groupNames = lodash.compact(lodash.map(fieldGroups, \"group_name\"));\n  // fields重新按分组排序\n  convertedFields.sort(getFieldsSortFun(groupNames));\n  return {\n    fields: convertedFields\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: clearFields()\n  }\n});\n\nsetTimeout(function () {\n  doAction({\n    actionType: 'setValue',\n    componentId: \"object-layout-form\",\n    args: {\n      value: convertDataForFields(eventData)\n    }\n  });\n}, 300);\n\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "type": "dialog",
                                                                "size": "md",
                                                                "id": "u:c405734543e0",
                                                                "closeOnEsc": false,
                                                                "closeOnOutside": false,
                                                                "showCloseButton": true
                                                            },
                                                            "label": "设置字段",
                                                            "id": "u:853b890ab524"
                                                        },
                                                        {
                                                            "type": "button",
                                                            "actionType": "dialog",
                                                            "dialog": {
                                                                "title": "设置分组",
                                                                "body": [
                                                                    {
                                                                        "type": "input-table",
                                                                        "name": "setting_groups",
                                                                        "addable": true,
                                                                        "draggable": true,
                                                                        "editable": true,
                                                                        "columns": [
                                                                            {
                                                                                "name": "group_name",
                                                                                "label": "名称",
                                                                                "id": "u:ee2fb813a3e7"
                                                                            }
                                                                        ],
                                                                        "value": "${field_groups}",
                                                                        "removable": true,
                                                                        "id": "u:e9f43ef94d08"
                                                                    }
                                                                ],
                                                                "onEvent": {
                                                                    "confirm": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "args": {},
                                                                                "componentId": "",
                                                                                "script": "const fieldGroupKey = \"group\";\nconst getFieldsSortFun = function (groupNames) {\n  return function (m, n) {\n    var tempM = !!m[fieldGroupKey] ? 1 : 0;\n    var tempN = !!n[fieldGroupKey] ? 1 : 0;\n    if (!m[fieldGroupKey] || !n[fieldGroupKey]) {\n      // 没有配置group属性的字段排在前面\n      return tempM - tempN;\n    }\n    // 字段所属分组不在groupNames时排在前面，其他字段按其所属分组在groupNames中的排序先后顺序排序，所属分组相同的字段排在一起。\n    return groupNames.indexOf(m[fieldGroupKey]) - groupNames.indexOf(n[fieldGroupKey]);\n  };\n}\n\n// 清空主表单fields字段值\nconst clearFields = function (input) {\n  return {\n    fields: []\n  }\n}\n\n// 把”设置分组“弹出窗口中设置的分组转为主表单groups字段值格式\n// 同时根据新的groups排序重新设置fields属性的字段先后次序\n// 因为直接设置fields值有bug，即新值老值会串，所以需要先执行上面的clearFields清除原来的值\nconst convertDataForGroups = function (input) {\n  const settingGroups = input.setting_groups || [];\n  const convertedGroups = lodash.uniqBy(settingGroups.map(function (item) {\n    return {\n      group_name: item.group_name\n    }\n  }), \"group_name\");\n\n  const groupNames = lodash.compact(lodash.map(convertedGroups, \"group_name\"));\n  const fields = input.__super.__super.items;\n  // fields重新按分组排序\n  fields.sort(getFieldsSortFun(groupNames));\n\n  return {\n    field_groups: convertedGroups,\n    fields: fields\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: clearFields()\n  }\n});\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: convertDataForGroups(eventData)\n  }\n});\n\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "type": "dialog",
                                                                "id": "u:e02c8f59216e",
                                                                "closeOnEsc": false,
                                                                "closeOnOutside": false,
                                                                "showCloseButton": true
                                                            },
                                                            "label": "设置分组",
                                                            "id": "u:ec9931ea883c"
                                                        }
                                                    ],
                                                    "id": "u:22121edc42b1"
                                                }
                                            ],
                                            "id": "u:ac5b7818b88f",
                                            "affixFooter": false,
                                            "api": {
                                                "method": "get",
                                                "url": "${context.rootUrl}/service/api/amis-metadata-objects/objects/${object_name}/fields/layout_options",
                                                "adaptor": "let data = payload.data;\ndata.fields_options = data.options;\ndata.field_groups_options = lodash.uniq(lodash.compact(lodash.map(data.options, \"group\"))) || [];\ndelete data.options\npayload.data = data;\nreturn payload;\n",
                                                "sendOn": "!!this.object_name",
                                                "data": null,
                                                "headers": {
                                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                }
                                            },
                                            "className": "col-span-2 m-0",
                                            "placeholder": "-",
                                            "onEvent": {
                                                "fetchInited": {
                                                    "actions": [
                                                        {
                                                            "actionType": "custom",
                                                            "script": "// 把字段中配置的group属性加到主表field_groups属性中\nconst mixingGroupsFromFields = function (input, formData) {\n  const groupsOptions = input.field_groups_options;\n  const groups = formData.field_groups || [];\n  const groupsForMixing = groupsOptions.map(function (item) {\n    return {\n      group_name: item\n    }\n  });\n  const mixedGroups = lodash.unionBy(groups, groupsForMixing, \"group_name\");\n  return {\n    field_groups: mixedGroups\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: mixingGroupsFromFields(eventData, context.props.data)\n  }\n});\n\n"
                                                        }
                                                    ]
                                                }
                                            },
                                            "messages": {}
                                        }
                                    ],
                                    "size": "none",
                                    "id": "u:100edb4c59d0"
                                }
                            ],
                            "id": "u:8b579617d2da"
                        },
                        {
                            "title": "子表",
                            "body": [
                                {
                                    "type": "wrapper",
                                    "body": [
                                        {
                                            "type": "service",
                                            "id": "u:dbadaff47153",
                                            "api": {
                                                "method": "get",
                                                "url": "${context.rootUrl}/service/api/amis-metadata-objects/objects/${object_name}/relatedLists/options",
                                                "sendOn": "!!this.object_name",
                                                "adaptor": "let data = payload.data;\ndata.related_lists_options = data.options;\ndelete data.options\npayload.data = data;\nreturn payload;\n",
                                                "headers": {
                                                    "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                }
                                            },
                                            "className": "col-span-2 m-0",
                                            "affixFooter": false,
                                            "body": [
                                                {
                                                    "name": "related_lists",
                                                    "type": "crud",
                                                    "strictMode": true,
                                                    "affixHeader": false,
                                                    "editable": true,
                                                    "addable": true,
                                                    "removable": true,
                                                    "draggable": false,
                                                    "columns": [
                                                        {
                                                            "name": "index",
                                                            "label": "序号",
                                                            "className": "w-10",
                                                            "type": "static",
                                                            "value": "${index + 1}",
                                                            "id": "u:a2f05dc83cd4"
                                                        },
                                                        {
                                                            "name": "related_field_fullname_label",
                                                            "label": "子表名称",
                                                            "type": "tpl",
                                                            "tpl": "${related_lists_options|filter:value:equals:related_field_fullname|pick:label}",
                                                            "id": "u:5204fc0fbe1c"
                                                        },
                                                        {
                                                            "name": "label",
                                                            "label": "显示标题",
                                                            "quickEdit": {
                                                                "type": "input-text",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, prop_name) {\n  const currentPropValue = input.value;\n  const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") { \n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, \"label\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "labelRemark": "默认为对象名称",
                                                                "className": "m-0",
                                                                "labelClassName": "text-left",
                                                                "id": "u:5b30f2a71830",
                                                                "name": "label"
                                                            },
                                                            "id": "u:1267e4351d66",
                                                            "placeholder": "-"
                                                        },
                                                        {
                                                            "name": "field_names",
                                                            "label": "显示的字段",
                                                            "quickEdit": {
                                                                "type": "transfer-picker",
                                                                "source": {
                                                                    "method": "get",
                                                                    "url": "/service/api/amis-metadata-objects/objects/${related_field_fullname|split:.|first}/fields/options",
                                                                    "cache": 60000,
                                                                    "headers": {
                                                                        "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                                    }
                                                                },
                                                                "searchable": true,
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"field_names\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "joinValues": false,
                                                                "extractValue": true,
                                                                "mode": "inline",
                                                                "id": "u:a85f62af394f",
                                                                "name": "field_names"
                                                            },
                                                            "type": "tpl",
                                                            "tpl": "<%= data.related_object_fields_options && data.related_object_fields_options[data.related_field_fullname] ? data.related_object_fields_options[data.related_field_fullname].filter(function(item){ return data.field_names && data.field_names.indexOf(item.value) > -1;}).map(function(item){return item.label}) : data.field_names%>",
                                                            "id": "u:ce65d4020107",
                                                            "placeholder": "-"
                                                        },
                                                        {
                                                            "name": "sort_field_name",
                                                            "label": "排序字段",
                                                            "quickEdit": {
                                                                "type": "transfer-picker",
                                                                "joinValues": false,
                                                                "extractValue": true,
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"sort_field_name\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "source": {
                                                                    "method": "get",
                                                                    "url": "/service/api/amis-metadata-objects/objects/${related_field_fullname|split:.|first}/fields/options",
                                                                    "cache": 60000,
                                                                    "headers": {
                                                                        "Authorization": "Bearer ${context.tenantId},${context.authToken}"
                                                                    }
                                                                },
                                                                "searchable": true,
                                                                "name": "sort_field_name",
                                                                "id": "u:c1e3daddf92c",
                                                                "mode": "inline"
                                                            },
                                                            "tpl": "<%= data.related_object_fields_options && data.related_object_fields_options[data.related_field_fullname] ? data.related_object_fields_options[data.related_field_fullname].filter(function(item){ return data.sort_field_name && data.sort_field_name.indexOf(item.value) > -1;}).map(function(item){return item.label}) : data.sort_field_name%>",
                                                            "id": "u:3dbee6a855c4"
                                                        },
                                                        {
                                                            "name": "sort_order",
                                                            "label": "排序方式",
                                                            "quickEdit": {
                                                                "className": "m-0",
                                                                "labelClassName": "text-left",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"sort_order\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "joinValues": false,
                                                                "extractValue": true,
                                                                "clearable": true,
                                                                "labelField": "label",
                                                                "valueField": "value",
                                                                "mode_": "inline",
                                                                "source": "${sort_order_options}",
                                                                "type": "select",
                                                                "name": "sort_order",
                                                                "id": "u:951e05ace916",
                                                                "multiple": false
                                                            },
                                                            "breakpoint": "*",
                                                            "type": "tpl",
                                                            "tpl": "${sort_order_options|filter:value:equals:sort_order|pick:label}",
                                                            "id": "u:13cb3d304615"
                                                        },
                                                        {
                                                            "name": "filters",
                                                            "label": "过滤规则",
                                                            "quickEdit": {
                                                                "type": "editor",
                                                                "language": "javascript",
                                                                "description": "函数签名：(filters, data) => 自定义过滤条件， 数据在 data 中，修改后返回 自定义过滤条件",
                                                                "tpl": "<b><%=data.filters%></b>",
                                                                "className": "col-span-2 m-0",
                                                                "labelClassName": "text-left",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"filters\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "name": "filters",
                                                                "id": "u:0436e626f06a",
                                                                "minRows": 3,
                                                                "maxRows": 20
                                                            },
                                                            "breakpoint": "*",
                                                            "id": "u:e4c367804b67"
                                                        },
                                                        {
                                                            "name": "visible_on",
                                                            "label": "显示条件",
                                                            "quickEdit": {
                                                                "type": "input-text",
                                                                "className": "m-0",
                                                                "labelClassName": "text-left",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"visible_on\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "tpl": "<b><%=data.visible_on%></b>",
                                                                "name": "visible_on",
                                                                "id": "u:3106cc0f9cc7",
                                                                "minRows": 3,
                                                                "maxRows": 20
                                                            },
                                                            "breakpoint": "*",
                                                            "id": "u:1e1dc52d7c33"
                                                        },
                                                        {
                                                            "name": "page_size",
                                                            "label": "每页显示数量",
                                                            "quickEdit": {
                                                                "type": "input-number",
                                                                "precision": 0,
                                                                "className": "m-0",
                                                                "labelClassName": "text-number",
                                                                "onEvent": {
                                                                    "change": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 字段列表每一列数据变量时立即同步值到表单中\nconst quickEidtSaveForRelatedList = function (input, rowValue, prop_name) {\n  debugger;\n  const currentPropValue = input.value;\n  // const rowValue = input;\n  delete rowValue.event;\n  const formValue = rowValue.__super.__super;\n  const related_field_fullname = rowValue.related_field_fullname;\n  rowValue[prop_name] = currentPropValue;\n  let newRelatedLists = formValue.related_lists.map(function (item) {\n    if (item.related_field_fullname == related_field_fullname) {\n      if (prop_name === \"related_field_fullname\") {\n        // 直接在表格上变更子表选项的话，清除其他属性值\n        return {\n          related_field_fullname: currentPropValue,\n          sort_order: \"asc\"\n        }\n      }\n      else {\n        return Object.assign({}, item, rowValue);\n      }\n    }\n    else {\n      return item;\n    }\n  });\n  const newFormDoc = {\n    related_lists: newRelatedLists\n  };\n  if (prop_name === \"field_names\" || prop_name === \"sort_field_name\") {\n    // 修改子表显示字段和排序字段时把变更后的字段值显示为label\n    const currentOptions = {};\n    currentOptions[related_field_fullname] = input.options;\n    newFormDoc.related_object_fields_options = Object.assign({}, formValue.related_object_fields_options, currentOptions);\n  }\n  return newFormDoc;\n}\n\nconst eventData = event.data;\n\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: quickEidtSaveForRelatedList(eventData, context.props.data, \"page_size\")\n  }\n});\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "name": "page_size",
                                                                "id": "u:0e261f265511"
                                                            },
                                                            "breakpoint": "*",
                                                            "id": "u:f9bbd9567bbd"
                                                        }
                                                    ],
                                                    "className": "col-span-2 m-0",
                                                    "labelClassName": "text-left",
                                                    "headerToolbar": [
                                                        {
                                                            "type": "button",
                                                            "actionType": "dialog",
                                                            "dialog": {
                                                                "title": "设置子表",
                                                                "body": [
                                                                    {
                                                                        "type": "transfer",
                                                                        "name": "picked_related_lists",
                                                                        "sortable": true,
                                                                        "source": "${related_lists_options}",
                                                                        "value": "${related_lists|pick:related_field_fullname}",
                                                                        "searchable": true,
                                                                        "id": "u:ab6a6c9c8677"
                                                                    }
                                                                ],
                                                                "onEvent": {
                                                                    "confirm": {
                                                                        "actions": [
                                                                            {
                                                                                "actionType": "custom",
                                                                                "script": "// 清空主表单related_lists字段值\nconst clearRelatedLists = function (input) {\n  return {\n    related_lists: []\n  }\n}\n\n// 把”设置子表“弹出窗口中设置的子表转为主表单related_lists字段值格式\nconst convertDataForRelatedLists = function (input) {\n  let pickedRelateds = input.picked_related_lists || [];\n  const superRelateds = _.keyBy(input.__super.related_lists, 'related_field_fullname');\n  if (typeof pickedRelateds === \"string\") {\n    pickedRelateds = pickedRelateds.split(\",\");\n  }\n  const convertedRelateds = pickedRelateds.map(function (key) {\n    return superRelateds[key] || {\n      related_field_fullname: key,\n      sort_order: \"asc\"\n    }\n  });\n  return {\n    related_lists: convertedRelateds\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: clearRelatedLists()\n  }\n});\n\nsetTimeout(function () {\n  doAction({\n    actionType: 'setValue',\n    componentId: \"object-layout-form\",\n    args: {\n      value: convertDataForRelatedLists(eventData)\n    }\n  });\n}, 300);\n"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "type": "dialog",
                                                                "size": "md",
                                                                "id": "u:3663990f226a",
                                                                "closeOnEsc": false,
                                                                "closeOnOutside": false,
                                                                "showCloseButton": true
                                                            },
                                                            "label": "设置子表",
                                                            "id": "u:b9a5d3b611d7"
                                                        }
                                                    ],
                                                    "source": "${related_lists}",
                                                    "footable": false,
                                                    "columnsTogglable": true,
                                                    "messages": {},
                                                    "tableClassName": "min-w-max",
                                                    "id": "u:95aea10231d3"
                                                }
                                            ],
                                            "messages": {}
                                        }
                                    ],
                                    "size": "none",
                                    "id": "u:100edb4c59d0"
                                }
                            ],
                            "id": "u:e09b5c1a4751"
                        }
                    ],
                    "id": "u:33778a88db62"
                }
            ],
            "panelClassName": "m-0 -mt-3",
            "bodyClassName": "p-4",
            "actions": [],
            "actionsClassName": "p-sm b-t b-light text-center",
            "className": "steedos-amis-form",
            "checkAll": false,
            "id": "object-layout-form",
            "onEvent": {
                "inited": {
                    "actions": [
                        {
                          "actionType": "custom",
                          "script": "// 新建页面布局时初始化buttons默认值，字段值是CRUD表格控件渲染，新建页面布局时，不会自动填充到form中，需要手动填充\nconst initDefaultButtons = function (input) {\n  const superValues = input.__super.__super || {};\n  if (superValues.recordId) {\n    // 编辑记录本来就会初始化相关字段值，不需要再初始化\n    return;\n  }\n  return {\n    buttons: input.buttons,\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: initDefaultButtons(eventData)\n  }\n});\n"
                        },
                        {
                          "actionType": "custom",
                          "script": "// 新建页面布局时初始化fields默认值，字段值是CRUD表格控件渲染，新建页面布局时，不会自动填充到form中，需要手动填充\nconst initDefaultFields = function (input) {\n  const superValues = input.__super.__super || {};\n  if (superValues.recordId) {\n    // 编辑记录本来就会初始化相关字段值，不需要再初始化\n    return;\n  }\n  return {\n    fields: input.fields,\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: initDefaultFields(eventData)\n  }\n});\n"
                        },
                        {
                          "actionType": "custom",
                          "script": "// 新建页面布局时初始化related_lists默认值，字段值是CRUD表格控件渲染，新建页面布局时，不会自动填充到form中，需要手动填充\nconst initDefaultRelatedLists = function (input, rowValue, prop_name) {\n  const superValues = input.__super.__super || {};\n  if (superValues.recordId) {\n    // 编辑记录本来就会初始化相关字段值，不需要再初始化\n    return;\n  }\n  return {\n    related_lists: input.related_lists,\n  }\n}\n\nconst eventData = event.data;\ndoAction({\n  actionType: 'setValue',\n  componentId: \"object-layout-form\",\n  args: {\n    value: initDefaultRelatedLists(eventData)\n  }\n});\n"
                        }
                    ]
                },
                "submitSucc": {
                    "weight": 0,
                    "actions": [
                        {
                            "actionType": "broadcast",
                            "args": {
                                "eventName": "@data.changed.object_layouts"
                            },
                            "data": {
                                "objectName": "object_layouts"
                            }
                        }
                    ]
                }
            },
            "data": {
                "sort_order_options": [
                    {
                        "label": "正序",
                        "value": "asc"
                    },
                    {
                        "label": "倒序",
                        "value": "desc"
                    }
                ]
            }
        }
    ],
    "regions": [
        "body"
    ],
    "data": {
        "objectName": "object_layouts"
    },
    "bodyClassName": "p-0",
    "name": "page_edit_${recordId}",
    "initApi": null,
    "initFetch": null,
    "className": "page-form-object_layouts",
    "id": "u:3b0de7e88def"
}