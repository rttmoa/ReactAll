{"version":3,"sources":["meteor://ðŸ’»app/packages/steedos:cfs-filesystem/filesystem.server.js"],"names":["fs","require","path","mkdirp","FS","Store","FileSystem","name","options","self","Error","pathname","__meteor_bootstrap__","serverDir","join","split","sep","homepath","process","env","HOME","HOMEPATH","USERPROFILE","replace","absolutePath","resolve","sync","debug","console","log","StorageAdapter","typeName","fileKey","fileObj","store","_getInfo","key","filename","filenameInStore","collectionName","_id","createReadStream","filepath","exists","existsSync","Meteor","createWriteStream","writeStream","on","stats","statSync","emit","size","storedAt","mtime","err","remove","callback","is_exists","unlink","error","result","errno","warn","stat"],"mappings":"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","file":"/packages/steedos_cfs-filesystem.js","sourcesContent":["var fs = require('fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\n//var chokidar = require('chokidar');\n\nFS.Store.FileSystem = function(name, options) {\n  var self = this;\n  if (!(self instanceof FS.Store.FileSystem))\n    throw new Error('FS.Store.FileSystem missing keyword \"new\"');\n\n  // We allow options to be string/path empty or options.path\n  options = (options !== '' + options) ? options || {} : {\n    path: options\n  };\n\n  // Provide a default FS directory one level up from the build/bundle directory\n  var pathname = options.path;\n  if (!pathname && __meteor_bootstrap__ && __meteor_bootstrap__.serverDir) {\n    pathname = path.join(__meteor_bootstrap__.serverDir, '../../../cfs/files/' + name);\n  }\n\n  if (!pathname)\n    throw new Error('FS.Store.FileSystem unable to determine path');\n\n  // Check if we have '~/foo/bar'\n  if (pathname.split(path.sep)[0] === '~') {\n    var homepath = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\n    if (homepath) {\n      pathname = pathname.replace('~', homepath);\n    } else {\n      throw new Error('FS.Store.FileSystem unable to resolve \"~\" in path');\n    }\n  }\n\n  // Set absolute path\n  var absolutePath = path.resolve(pathname);\n\n  // Ensure the path exists\n  mkdirp.sync(absolutePath);\n  FS.debug && console.log(name + ' FileSystem mounted on: ' + absolutePath);\n\n  return new FS.StorageAdapter(name, options, {\n    typeName: 'storage.filesystem',\n    fileKey: function(fileObj) {\n      // Lookup the copy\n      var store = fileObj && fileObj._getInfo(name);\n      // If the store and key is found return the key\n      if (store && store.key) return store.key;\n\n      var filename = fileObj.name();\n      var filenameInStore = fileObj.name({\n        store: name\n      });\n\n      // If no store key found we resolve / generate a key\n      return fileObj.collectionName + '-' + fileObj._id + '-' + (filenameInStore || filename);\n    },\n    createReadStream: function(fileKey, options) {\n      // this is the Storage adapter scope\n      var filepath = path.join(absolutePath, fileKey);\n\n      exists = fs.existsSync(filepath);\n      if (!exists)\n        throw new Meteor.Error(404, \"Not Found\", 'No file found');\n\n      // return the read stream - Options allow { start, end }\n      return fs.createReadStream(filepath, options);\n    },\n    createWriteStream: function(fileKey, options) {\n      options = options || {};\n\n      // this is the Storage adapter scope\n      var filepath = path.join(absolutePath, fileKey);\n\n      // Return the stream handle\n      var writeStream = fs.createWriteStream(filepath, options);\n\n      // The filesystem does not emit the \"end\" event only close - so we\n      // manually send the end event\n      writeStream.on('close', function() {\n        if (FS.debug) console.log('SA FileSystem - DONE!! fileKey: \"' + fileKey + '\"');\n\n        // Get the exact size of the stored file, so that we can pass it to onEnd/onStored.\n        // Since stream transforms might have altered the size, this is the best way to\n        // ensure we update the fileObj.copies with the correct size.\n        try {\n          // Get the stats of the file\n          var stats = fs.statSync(filepath);\n\n          // Emit end and return the fileKey, size, and updated date\n          writeStream.emit('stored', {\n            fileKey: fileKey,\n            size: stats.size,\n            storedAt: stats.mtime\n          });\n\n        } catch (err) {\n          // On error we emit the error on\n          writeStream.emit('error', err);\n        }\n      });\n\n      return writeStream;\n    },\n    remove: function(fileKey, callback) {\n      // this is the Storage adapter scope\n      var filepath = path.join(absolutePath, fileKey);\n      var is_exists = fs.existsSync(filepath);\n      if (is_exists) {\n        // Call node unlink file\n        fs.unlink(filepath, function(error, result) {\n          if (error && error.errno === 34) {\n            console.warn(\"SA FileSystem: Could not delete \" + filepath + \" because the file was not found.\");\n            callback && callback(null);\n          } else {\n            callback && callback(error, result);\n          }\n        });\n      } else {\n        callback && callback(null);\n      }\n    },\n    stats: function(fileKey, callback) {\n        // this is the Storage adapter scope\n        var filepath = path.join(absolutePath, fileKey);\n        if (typeof callback === 'function') {\n          fs.stat(filepath, callback);\n        } else {\n          return fs.statSync(filepath);\n        }\n      }\n      // Add this back and add the chokidar dependency back when we make this work eventually\n      // watch: function(callback) {\n      //   function fileKey(filePath) {\n      //     return filePath.replace(absolutePath, \"\");\n      //   }\n\n    //   FS.debug && console.log('Watching ' + absolutePath);\n\n    //   // chokidar seems to be most widely used and production ready watcher\n    //   var watcher = chokidar.watch(absolutePath, {ignored: /\\/\\./, ignoreInitial: true});\n    //   watcher.on('add', Meteor.bindEnvironment(function(filePath, stats) {\n    //     callback(\"change\", fileKey(filePath), {\n    //       name: path.basename(filePath),\n    //       type: null,\n    //       size: stats.size,\n    //       utime: stats.mtime\n    //     });\n    //   }, function(err) {\n    //     throw err;\n    //   }));\n    //   watcher.on('change', Meteor.bindEnvironment(function(filePath, stats) {\n    //     callback(\"change\", fileKey(filePath), {\n    //       name: path.basename(filePath),\n    //       type: null,\n    //       size: stats.size,\n    //       utime: stats.mtime\n    //     });\n    //   }, function(err) {\n    //     throw err;\n    //   }));\n    //   watcher.on('unlink', Meteor.bindEnvironment(function(filePath) {\n    //     callback(\"remove\", fileKey(filePath));\n    //   }, function(err) {\n    //     throw err;\n    //   }));\n    // }\n  });\n};"]}