{
  "examples.starter.title": "Практика",
  "examples.starter.description": "Тепер настав час попрактикуватися, щоб закріпити те, що ви дізналися.",

  "examples.finish.title": "Практику завершено!",
  "examples.finish.description": " ",

  "steps.starter.title": "Вступ",
  "steps.starter.description": "Regex - це скорочення від `Regular Expression` `(Регулярний вираз)`. Це допомагає зіставляти, знаходити чи керувати текстом. Почніть з введення `OK` (латиницею) в поле Regex, щоб перейти до першого кроку і отримати доступ до більш детального опису.",

  "steps.whatIsRegex.title": "Що таке регулярні вирази `Regex`?",
  "steps.whatIsRegex.description": "Регулярні вирази - це рядок символів, що виражає шаблон пошуку, часто скорочується як `Regex` або `Regexp`. Regexp використовується для пошуку або заміни слів у текстах, крім того, ми можемо перевірити, чи текст відповідає встановленим нами правилам чи ні.\\n\\n Наприклад, у вас є список імен файлів і ви хочете знайти тільки файли з розширенням `pdf`. Після введення виразу `^\\w+\\.pdf$` це буде працювати. Значення визначень у цьому вираженні стане зрозумілішим у міру виконання кроків.",

  "steps.basicMatchers.title": "Базові подібності",
  "steps.basicMatchers.description": "Символ чи слово, яке ми хочемо знайти, написане безпосередньо – це схоже на звичайний процес пошуку. Наприклад, щоб знайти слово `curious` у тексті, введіть те саме.",

  "steps.dotCharacter.title": "Крапка `.`: Будь-які символи",
  "steps.dotCharacter.description": "Крапка `.` дозволяє вибрати будь-який символ, включаючи спеціальні символи та пробіли.",

  "steps.characterSet.title": "Набори символів `[abc]`",
  "steps.characterSet.description": "Якщо одним із символів у слові можуть бути різні символи, ми записуємо їх у квадратні дужки `[]` з усіма альтернативними символами. Наприклад, щоб написати вираз, який може знайти всі слова в тексті, введіть символи `a`, `e`, `i`, `o`, `u` у квадратні дужки `[]`.",

  "steps.negatedCharacterSet.title": "Набори негативних символів `[^abc]`",
  "steps.negatedCharacterSet.description": "Щоб знайти всі слова в наведеному нижче тексті, крім `ber` та `bor`, введіть `e` та `o` поруч після символу каретки `^` усередині квадратних дужок `[]`.",

  "steps.range.title": "Літерний діапазон `[a-z]`",
  "steps.range.description": "Щоб знайти літери у вказаному діапазоні, початкова літера та кінцева літера записуються у квадратні дужки `[]` з тире між ними `-`. Реєстр враховується. Тип виразу, який вибере всі малі літери між `e` і `o`, включаючи їх самих.",

  "steps.rangeNumber.title": "Цифровий діапазон `[0-9]`",
  "steps.rangeNumber.description": "Щоб знайти числа у вказаному діапазоні, початковий номер і кінцевий номер записуються в квадратних дужках `[]` з тире `-' між ними. Напишіть вираз, який вибере всі числа від `3` до `6`, включаючи самих себе.",

  "examples.basicMatchers.title": "Практика: Базові подібності",
  "examples.basicMatchers.description": "Напишіть вираз, який вибиратиме слова `of` у тексті.",

  "examples.dotCharacter.title": "Практика: Будь-які символи",
  "examples.dotCharacter.description": "Введіть вираз для вибору окремих літер, цифр, пробілів та спеціальних символів у тексті. Вираз, що вводиться, повинен відповідати будь-якому символу.",

  "examples.characterSet.title": "Практика: Набори символів",
  "examples.characterSet.description": "Напишіть фразу, яка відповідає кожному слову тексту. Єдині символи, які змінюються – це ініціали слів.",

  "examples.negatedCharacterSet.title": "Практика: Негативні набори символів",
  "examples.negatedCharacterSet.description": "Запишіть вираз, який буде відповідати будь-чому, крім слів `beor` та `beur` у тексті. Зробіть це за допомогою негативного набору символів.",

  "examples.range.title": "Практика: Діапазон букв",
  "examples.range.description": "Напишіть вираз, який вибиратиме літери від `g` до `k` у тексті.\\n `g` та `k` також повинні бути включені в цей діапазон.",

  "examples.rangeNumber.title": "Практика: Діапазон номерів",
  "examples.rangeNumber.description": "Введіть вираз для вибору чисел від `2` до `7` у тексті.\\n `2` та `7` також повинні бути включені в цей діапазон.",

  "steps.repetitions.title": "Повторення",
  "steps.repetitions.description": "Деякі спеціальні символи використовуються для вказівки того, скільки разів символ повторюватиметься в тексті. Ці спеціальні символи - плюс `+`, зірочка `*` і знак запитання `?`.",

  "steps.asterisk.title": "Зірочка `*`",
  "steps.asterisk.description": "Ми ставимо зірочку `*` в кінці, щоб вказати, що символ взагалі не збігається або може збігатися багато разів. Наприклад, вкажіть, що літера `e` ніколи не повинна зустрічатися в тексті, або це може бути один або кілька разів.",

  "steps.plusCharacter.title": "Знак плюс `+`",
  "steps.plusCharacter.description": "Щоб вказати, що символ може зустрічатися один або кілька разів, ми ставимо знак плюс `+` в кінці. Наприклад, вказуємо, що літера `e` може зустрічатися один або кілька разів у тексті.",

  "steps.questionMark.title": "Знак питання `?`",
  "steps.questionMark.description": "Щоб вказати, що символ є необов'язковим, ми ставимо наприкінці знак запитання `?`. Наприклад, вказуємо, що наступна літера `u` не є обов'язковою.",

  "steps.quantifier.title": "Фігурні дужки - 1",
  "steps.quantifier.description": "Щоб висловити певну кількість входжень символу, ми пишемо фігурні дужки `{n}` разом із значенням, скільки разів ми хочемо, щоб він зустрічався наприкінці. Наприклад, вкажіть, що наступна літера `e` може зустрічатися лише `2` рази.",

  "steps.quantifierMin.title": "Фігурні дужки - 2",
  "steps.quantifierMin.description": "Щоб висловити певну кількість входжень символу, ми пишемо в кінець символу скільки разів ми хочемо, щоб він зустрічався, з комою `,` в кінці та всередині фігурних дужок `{n,}`. Наприклад, вкажіть, що наступна літера `e` може зустрічатися не менше `3` разів.",

  "steps.quantifierRange.title": "Фігурні дужки - 3",
  "steps.quantifierRange.description": "Щоб висловити появу символу у певному діапазоні чисел, ми пишемо фігурні дужки `{x, y}` з інтервалом, з яким хочемо перейти до кінця. Наприклад, вкажіть, що наступна літера `e` може зустрічатися тільки між `1` та `3`.",

  "examples.asterisk.title": "Практика: Зірочка `*`",
  "examples.asterisk.description": "Використовуйте зірочку `*`, щоб написати вираз, який вибиратиме кожне слово, яке підходить для відсутності літери `e` у тексті та наявності більше одного.",

  "examples.plusCharacter.title": "Практика: Знак плюс `+`",
  "examples.plusCharacter.description": "Напишіть вираз, використовуючи знак плюса `+` для вибору слів, у яких буква `e` зустрічається в тексті один або кілька разів.",

  "examples.questionMark.title": "Практика: Знак питання `?`",
  "examples.questionMark.description": "Напишіть вираз, що вказує, що літера `n` необов'язкова у тексті, використовуючи знак запитання `?`. Таким чином, можна вибрати обидва слова `a` та `an`.",

  "examples.quantifier.title": "Практика: Фігурні дужки - 1",
  "examples.quantifier.description": "Запишіть вираз, використовуючи фігурні дужки `{}`, щоб вибрати в тексті 4-х значні числа від `0` до `9`.",

  "examples.quantifierMin.title": "Практика: Фігурні дужки - 2",
  "examples.quantifierMin.description": "Введіть вираз, використовуючи фігурні дужки `{}`, щоб вибрати числа від `0` до `9`, які зустрічаються в тексті не менше `2` разів.",

  "examples.quantifierRange.title": "Практика: Фігурні дужки - 3",
  "examples.quantifierRange.description": "Напишіть вираз, використовуючи фігурні дужки `{}`, щоб вибирати числа від `0` до `9` у тексті, що перебуває між `1` і `4`.",

  "steps.groupping.title": "Круглі дужки `()`: Група",
  "steps.groupping.description": "Ми можемо згрупувати вираз і використовувати ці групи для посилання або забезпечення дотримання деяких правил. Щоб згрупувати вираз, ми укладаємо `()` у круглі дужки. Зараз просто згрупуйте `haa` нижче.",

  "steps.groupReference.title": "Посилання на групу",
  "steps.groupReference.description": "Слово `ha` та `haa` згруповані нижче. Перша група використовується шляхом запису `\\1`, щоб уникнути перезапису. Тут `1` означає порядок угруповання. Введіть `\\2` в кінці виразу для позначення другої групи.",

  "steps.nonCapturingGroupping.title": "Круглі дужки `(?:)`: Група без захоплення",
  "steps.nonCapturingGroupping.description": "Ви можете згрупувати вираз та переконатися, що воно не перехоплюється посиланнями. Наприклад, нижче представлені дві групи, проте перше групове посилання, яке ми позначаємо за допомогою `\\1`, фактично вказує на другу групу, тому що перша - незафіксована група.",

  "steps.pipeCharacter.title": "Вертикальна смужка `|`",
  "steps.pipeCharacter.description": "Дозволяє вказати, що вираз може бути в різних виразах. Таким чином, всі можливі оператори записуються через вертикальну смужку `|`, це відрізняється від кодування `[abc]`, що працює з кодуванням на рівні символів. Наприклад, у наступному виразі будуть обрані `cat` та `rat`. Додайте ще одну вертикальну смужку `|` в кінець виразу та введіть `dog`, щоб усі слова були вибрані.",

  "steps.escapeCharacter.title": "Escape-символ `\\`",
  "steps.escapeCharacter.description": "Існують спеціальні символи, які ми використовуємо при написанні регулярних виразів. `{} [] / \\ + * . $ ^ | ?`. Перш ніж ми зможемо вибрати саме ці символи, нам потрібно використовувати символ escape `\\`. Наприклад, щоб виділити в тексті символи точки `.` та зірочки `*`, давайте додамо перед ним escape-символ `\\`.",

  "steps.caret.title": "Знак каретки `^`:\\n Вибір початку рядка",
  "steps.caret.description": "Ми використовували `[0-9]` для пошуку чисел. Щоб знайти лише числа на початку рядка, додайте до цього виразу префікс `^`.",

  "steps.dollar.title": "Знак долара `$`:\\n Вибір кінця рядка",
  "steps.dollar.description": "Давайте використаємо знак `$` після значення `html`, щоб знайти текст `html` тільки наприкінці рядка.",

  "steps.wordCharacter.title": "Цифробуквенний `\\w`: Літера, число та підкреслення",
  "steps.wordCharacter.description": "Вираз `\\w` використовується для пошуку букв, цифр та символів підкреслення. Давайте скористаємося виразом `\\w` для пошуку словесних символів у тексті.",

  "steps.withoutWordCharacter.title": "Крім цифробуквенних `\\W`",
  "steps.withoutWordCharacter.description": "Вираз `\\W` використовується для пошуку символів, що відрізняються від букв, цифр та знаків підкреслення.",

  "steps.numberCharacter.title": "Числовий символ `\\d`",
  "steps.numberCharacter.description": "`\\d` використовується для пошуку лише числових символів.",

  "steps.withoutNumberCharacter.title": "Крім символу числа `\\D`",
  "steps.withoutNumberCharacter.description": "`\\D` використовується для пошуку нечислових символів.",

  "steps.spaceCharacter.title": "Пробіл `\\s`",
  "steps.spaceCharacter.description": "`\\s` використовується для пошуку тільки пробілів.",

  "steps.withoutSpaceCharacter.title": "Крім символу пробілу `\\S`",
  "steps.withoutSpaceCharacter.description": "`\\S` використовується для пошуку непробільних символів.",

  "steps.lookarounds.title": "Lookarounds (Позиційні перевірки)",
  "steps.lookarounds.description": "Якщо ми хочемо, щоб фраза, яку ми пишемо, знаходилася до або після іншої фрази, нам потрібно використовувати \"lookaround\". Виконайте наступний крок, щоб дізнатися, як працює \"lookaround\".",

  "steps.positiveLookahead.title": "Позитивна випереджальна перевірка: `(?=)`",
  "steps.positiveLookahead.description": "Наприклад, хочемо вибрати значення години в тексті. Отже, щоб вибрати лише числові значення, після яких стоїть `PM`, нам потрібно написати вираз позитивної випереджувальної перевірки `(?=)` після нашого виразу. Увімкніть `PM` після знака `=` усередині дужок.",

  "steps.negativeLookahead.title": "Негативна випереджальна перевірка: `(?!)`",
  "steps.negativeLookahead.description": "Наприклад, хочемо вибрати в тексті числа, відмінні від значення години. Отже, нам потрібно написати вираз негативної випереджувальної перевірки `(?!)` після нашого виразу, щоб вибрати лише числові значення, після яких не ставиться `PM`. Увімкніть `PM` після знака `!` усередині дужок.",

  "steps.positiveLookbehind.title": "Позитивна ретроспективна перевірка: `(?<=)`",
  "steps.positiveLookbehind.description": "Наприклад, хочемо вибрати значення ціни у тексті. Отже, щоб вибрати лише числові значення, яким передує `$`, нам потрібно написати вираз позитивної ретроспективної перевірки `(?<=)` перед нашим виразом. Додайте `\\$` після знака `=` всередині дужок.",

  "steps.negativeLookbehind.title": "Негативна ретроспективна перевірка: `(?&lt;!)`",
  "steps.negativeLookbehind.description": "Наприклад, хочемо вибрати в тексті числа, відмінні від значення ціни. Отже, щоб вибрати лише числові значення, яким не передує `$`, нам потрібно написати вираз негативної ретроспективної перевірки `(?&lt;!)` перед нашим виразом. Додайте `\\$` після `!` всередині дужок.",

  "steps.flags.title": "Прапори",
  "steps.flags.description": "Прапори змінюють висновок виразу, тому прапори ще називають `modifiers`. Вони визначають, обробляють типізовані вирази, тексту, як окремі рядки, враховують регістр чи знаходять усі збіги. Перейдіть до наступного кроку, щоб вивчити прапори.",

  "steps.flagsGlobal.title": "Глобальний прапор",
  "steps.flagsGlobal.description": "Прапор `global` змушує вираз вибирати усі збіги. Якщо не використовується, буде вибрано лише перший збіг. Тепер увімкніть прапор `global`, щоб мати можливість вибирати усі збіги.",

  "steps.flagsMultiline.title": "Багаторядковий прапор",
  "steps.flagsMultiline.description": "Regex бачить весь текст як один рядок, але ми використовуємо прапор `multiline` для обробки кожного рядка окремо. Таким чином, вирази ми пишемо після закінчення лінії окремо для кожного рядка. Тепер увімкніть прапор `multiline`, щоб знайти всі збіги.",

  "steps.flagsCaseInsensitive.title": "Прапор без урахування регістру",
  "steps.flagsCaseInsensitive.description": "Щоб усунути чутливість до регістру в написаному нами виразі, ми повинні активувати прапор `case-insensitive`.",

  "steps.greedyMatching.title": "Жадібна відповідність",
  "steps.greedyMatching.description": "За замовчуванням Regex виконує жадібне зіставлення. Це означає, що вибір буде максимально тривалим, перегляньте приклад нижче. Він відноситься до будь-якого збігу, який закінчується на `r` і може бути будь-яким попереднім йому символом. Але він не закінчується на першій літері `r`.",

  "steps.lazyMatching.title": "Лінива відповідність",
  "steps.lazyMatching.description": "Ліниве зіставлення, на відміну від жадібного зіставлення, зупиняється при першому зіставленні. Наприклад, у наведеному нижче прикладі додайте `?` після `*`, щоб знайти перший збіг, який закінчується буквою `r` і перед ним стоїть будь-який символ. Це означає, що збіг зупиниться на першій літері `r`.",

  "steps.completeAllSteps.title": "Вітаємо, ви пройшли усі кроки!",
  "steps.completeAllSteps.description": "Ви можете повернутись до попередніх кроків, коли захочете і ви можете легко пересуватися по всіх кроках, які ви пройшли."
}
