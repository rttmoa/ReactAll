{
  "examples.starter.title": "Pratik",
  "examples.starter.description": "Şimdi öğrendiklerimizi pekiştirmek için biraz pratik zamanı.",

  "examples.finish.title": "Pratik Tamamlandı!",
  "examples.finish.description": " ",

  "steps.starter.title": "Giriş",
  "steps.starter.description": "Regex `Regular Expression` 'in kısaltmasıdır. Metni eşleştirmeye, bulmaya ya da yönetmeye yardımcı olur. İlk adıma geçmek ve daha detaylı açıklamaya erişmek için Regex alanına `OK` yazarak başlayın.",

  "steps.whatIsRegex.title": "Düzenli İfadeler `Regex` Nedir?",
  "steps.whatIsRegex.description": "Düzenli İfadeler bir arama modelini ifade eden bir karakter dizisidir. Genellikle `Regex` ya da `Regexp` olarak kısaltılmıştır. Özelikle metinlerde geçen sözcükleri bulmak veya değiştirmek için kullanılır. Ayrıca bir metnin belirlediğimiz kurallara uyup uymadığı test edilebilir.\\n\\n Örneğin dosya isimlerinden oluşan bir listeniz olduğunu düşünelim. Ve siz sadece `pdf` uzantılı dosyaları bulmak istiyorsunuz. O halde şöyle bir ifade `^\\w+\\.pdf$` yazmak işe yarayacaktır. Bu ifadedeki tanımlamaların ne anlama geldiği adımlar geçtikçe daha anlaşılır olacak.",

  "steps.basicMatchers.title": "Temel Eşleştiriciler",
  "steps.basicMatchers.description": "Bulmak istediğimiz karakter ya da sözcük doğrudan yazılır. Normal bir arama işlemine benzer. Örneğin metinde geçen `curious` sözcüğünü bulmak için, aynısını yazın.",

  "steps.dotCharacter.title": "Nokta `.`: Herhangi Bir Karakter",
  "steps.dotCharacter.description": "Nokta `.` işareti özel karakterler ve boşluklar da dahil herhangi bir karakteri seçmeyi sağlar.",

  "steps.characterSet.title": "Karakter Setleri `[abc]`",
  "steps.characterSet.description": "Eğer bir sözcüğün içerdiği karakterlerden biri çeşitli karakterler olabilirse bunu köşeli parantez `[]` içerisinde tüm alternatif karakterler ile birlikte yazarız. Örneğin metindeki tüm sözcükleri bulabilecek ifadeyi yazabilmek için `a`, `e`, `i`, `o`, `u` karakterlerini bitişik olarak köşeli parantezlerin `[]` içine yazın.",

  "steps.negatedCharacterSet.title": "Negatiflenmiş Karakter Setleri `[^abc]`",
  "steps.negatedCharacterSet.description": "Aşağıdaki metinde `ber` ve `bor` sözcükleri dışındaki tüm sözcükleri bulabilmek için süslü parantezlerin `[]` içine şapka `^` karakterinden sonra `e` ve `o` harfini yan yana yazın.",

  "steps.range.title": "Harf Karakter Aralığı `[a-z]`",
  "steps.range.description": "Belirttiğimiz aralıktaki harfleri bulmak için başlangıç harfi ve bitiş harfi aralarında bir tire `-` olacak şekilde köşeli parantezler `[]` içine yazılır. Büyük küçük harf duyarlıdır. Kendileri de dahil `e` ve `o` aralarındaki tüm küçük harfleri seçecek ifadeyi yazın.",

  "steps.rangeNumber.title": "Sayı Karakter Aralığı `[0-9]`",
  "steps.rangeNumber.description": "Belirttiğimiz aralıktaki sayıları bulmak için başlangıç sayısı ve bitiş sayısı aralarında bir tire `-` olacak şekilde köşeli parantezler `[]` içine yazılır. Kendileride dahil `3` ve `6` aralarındaki tüm sayıları seçecek ifadeyi yazın.",

  "examples.basicMatchers.title": "Pratik: Temel Eşleştici",
  "examples.basicMatchers.description": "Metinde geçen `of` kelimelerini seçecek ifadeyi yazın.",

  "examples.dotCharacter.title": "Pratik: Her Karakter",
  "examples.dotCharacter.description": "Metinde geçen harf, sayı, boşluk ve özel karakterleri tek tek seçecek ifadeyi yazın. Yazdığınız ifade herhangi bir karakterle eşleşebilmelidir.",

  "examples.characterSet.title": "Pratik: Karakter Setleri",
  "examples.characterSet.description": "Metindeki her kelimeyle eşleşecek olan ifadeyi yazın. Değişen tek karakter kelimelerin baş harfleridir.",

  "examples.negatedCharacterSet.title": "Pratik: Negatiflenmiş Karakter Setleri",
  "examples.negatedCharacterSet.description": "Metindeki `beor` ve `beur` kelimeleri dışındakilerle eşleşecek olan ifadeyi yazın. Bunu negatiflenmiş karakter setini kullanarak yapın.",

  "examples.range.title": "Pratik: Harf Karakter Aralığı",
  "examples.range.description": "Metindeki `g` harfinden `k` harfine kadar olan harfleri seçecek ifadeyi yazın.\\n`g` ve `k` harfleride bu aralığa dahil olmalıdır.",

  "examples.rangeNumber.title": "Pratik: Sayı Karakter Aralığı",
  "examples.rangeNumber.description": "Metindeki `2` sayısından `7` sayısına kadar olan sayıları seçecek ifadeyi yazın.\\n`2` ve `7` sayısıda bu aralığa dahil olmalıdır.",

  "steps.repetitions.title": "Tekrarlar",
  "steps.repetitions.description": "Bir karakterin kaç defa tekrar edeceğini, metinde bulunup bulunmayacağını ifade etmek için bazı özel karakterler kullanılır. Bu özel karakterler artı `+`, yıldız `*` ve soru işareti `?` dir.",

  "steps.asterisk.title": "Yıldız İşareti `*`",
  "steps.asterisk.description": "Bir karakterin hiç eşleşmemesini ya da çok sayıda eşleşebileceğini ifade etmek için sonuna `*` yıldız işareti koyarız. Örneğin metinde `e` harfinin hiç geçmeyeceğini ya da yan yana bir ya da daha fazla geçebileceğini belirtin.",

  "steps.plusCharacter.title": "Artı İşareti `+`",
  "steps.plusCharacter.description": "Bir karakterin bir ya da daha fazla geçebileceğini ifade etmek için sonuna `+` artı işareti koyarız. Örneğin metinde `e` harfinin bir ya da yan yana daha fazla geçebileceğini belirtin.",

  "steps.questionMark.title": "Soru İşareti `?`",
  "steps.questionMark.description": "Bir karakterin opsiyonel olduğunu ifade etmek için sonuna `?` soru işareti koyarız. Örneğin aşağıdaki `u` harfinin opsiyonel olduğunu belirtin.",

  "steps.quantifier.title": "Süslü Parantezler - 1",
  "steps.quantifier.description": "Bir karakterin belirli bir sayıda geçmesini ifade etmek için sonuna kaç kere geçmesini istediğimizle birlikte süslü parantezleri `{n}` yazarız. Örneğin aşağıdaki `e` harfinin sadece `2` kere geçebileceğini belirtin.",

  "steps.quantifierMin.title": "Süslü Parantezler - 2",
  "steps.quantifierMin.description": "Bir karakterin en az belirli bir sayıda geçmesini ifade etmek için karekterin sonuna en az kaç kere geçmesini istediğimizi sonuna virgül `,` ile birlikte süslü parantezlerin `{n, }` içine yazarız. Örneğin aşağıdaki `e` harfinin en az `3` kez geçebileceğini belirtin.",

  "steps.quantifierRange.title": "Süslü Parantezler - 3",
  "steps.quantifierRange.description": "Bir karakterin belirli bir sayı aralığında geçmesini ifade etmek için sonuna geçmesini istediğimiz aralıkla birlikte süslü parantezleri `{x,y}` yazarız. Örneğin aşağıdaki `e` harfinin sadece `1` ile `3` arasında geçebileceğini belirtin.",

  "examples.asterisk.title": "Pratik: Yıldız İşareti `*`",
  "examples.asterisk.description": "Metindeki `e` harfinin olmama, bir veya daha fazla olma durumuna uygun, her kelimeyi seçecek ifadeyi yıldız işaretini `*` kullanarak yazın.",

  "examples.plusCharacter.title": "Pratik: Artı İşareti `+`",
  "examples.plusCharacter.description": "Metindeki `e` harfinin bir veya daha fazla geçtiği kelimeleri seçecek ifadeyi artı işaretini `+` kullanarak yazın.",

  "examples.questionMark.title": "Pratik: Soru İşareti `?`",
  "examples.questionMark.description": "Metinde geçen `n` harfinin opsiyonel olduğunu bildiren ifadeyi soru işaretini `?` kullanarak yazın. Böylelikle hem `a` hemde `an` sözcükleri seçilebilmiş olsun.",

  "examples.quantifier.title": "Pratik: Süslü Parantezler - 1",
  "examples.quantifier.description": "Yan yana `4` sayı geçen metinleri bulacak ifadeyi süslü parantez `{}` kullanarak yazın.",

  "examples.quantifierMin.title": "Pratik: Süslü Parantezler - 2",
  "examples.quantifierMin.description": "Yan yana en az `2` sayı geçen metinleri bulacak ifadeyi süslü parantez `{}` kullanarak yazın.",

  "examples.quantifierRange.title": "Pratik: Süslü Parantezler - 3",
  "examples.quantifierRange.description": "Yan yana en az `1` en fazla `4` sayı geçen metinleri bulacak ifadeyi süslü parantez `{}` kullanarak yazın.",

  "steps.groupping.title": "Parantezler `( )`: Gruplama",
  "steps.groupping.description": "Bir ifadeyi gruplayabilir ve bu grupları referans göstermek ya da bazı kurallar uygulamak için kullanabiliriz. Bir ifadeyi gruplamak için `()` parantez içine alırız. Şimdilik sadece aşağıdaki `haa` kelimesini gruplayın.",

  "steps.groupReference.title": "Bir Gruba Referans Göstermek",
  "steps.groupReference.description": "Aşağıda `ha` ve `haa` kelimeleri gruplanmıştır. İlk grup tekrar yazılmamak için `\\1` yazılarak kullanılır. Buradaki `1` gruplanma sırasını ifade eder. İkinci gruba refarans göstermek için ifadenin sonun `\\2` yazın.",

  "steps.nonCapturingGroupping.title": "Parantezler `(?: )`: Yakalanmayan Gruplama",
  "steps.nonCapturingGroupping.description": "Aşağıda `ha` ve `haa` kelimeleri gruplanmıştır. İlk grup yakalanmayan bir gruptur. Bu yüzden referans verilemez. Gruplanmış `haa` kelimesine referans göstermek için ifadenin sonuna `\\1` yazın. Buradaki `1` yakalanan grupların sırasını ifade eder.",

  "steps.pipeCharacter.title": "Boru Karakteri `|`",
  "steps.pipeCharacter.description": "Bir ifadenin farklı ifadelerde olabileceğini belirmeyi sağlar. Böylece olabilecek tüm ifadeler boru işareti `|` ile birbirinden ayrılarak yazılır. Bunun karakter setinden `[abc]` farkı, karakter setleri karakter seviyesinde çalışır. Alternatifler ise ifade düzeyindedir. Örneğin aşağıdaki ifade hem `cat` hemde `rat` sözcüklerini seçecek şekildedir. İfadenin sonuna bir boru işareti `|` daha ekleyip `dog` yazarak tüm sözcüklerin seçilmesini sağlayın.",

  "steps.escapeCharacter.title": "Kaçış Karakteri `\\`",
  "steps.escapeCharacter.description": "Regex yazarken kullandığımız özel karakterler vardır. `{ } [ ] / \\ + * . $ ^ | ?` Bu karakterlerin kendilerini seçebilmek için öncesinde bir kaçış karakteri `\\` kullanmamız gerekir. Örneğin metindeki nokta `.` ve yıldız `*` karakterlerini seçmek için öncesine bir kaçış karakteri `\\` ekleyelim.",

  "steps.caret.title": "Şapka İşareti `^`:\\nSatır Başlangıcına Göre Seçmek",
  "steps.caret.description": "Sayıları bulmak için `[0-9]` ifadesini kullanıyorduk. Sadece satır başında geçen sayıları bulmak için bu ifadenin başına `^` işaretini ekleyin.",

  "steps.dollar.title": "Dolar İşareti `$`:\\nSatır Sonuna Göre Seçmek",
  "steps.dollar.description": "Sadece satır sonunda geçen `html` metinlerini bulmak için `$` işaretini `html` değerinden sonra kullanalım.",

  "steps.wordCharacter.title": "Sözcük Karakteri `\\w`: Harf, Sayı ve Alt Çizgi",
  "steps.wordCharacter.description": "Harf, sayı ve alt çizgi karakterlerini bulmak için `\\w` ifadesi kullanılır. Metindeki sözcük karakterlerini bulmak için `\\w` ifadesini kullanalım.",

  "steps.withoutWordCharacter.title": "Sözcük Karakteri Dışındakiler `\\W`",
  "steps.withoutWordCharacter.description": "Harf, sayı ve alt çizgi karakterleri dışında kalan karakterleri bulmak için `\\W` ifadesi kullanılır.",

  "steps.numberCharacter.title": "Sayı Karakteri `\\d`",
  "steps.numberCharacter.description": "Sadece sayı karakterlerini bulmak için `\\d` kullanılır.",

  "steps.withoutNumberCharacter.title": "Sayı Karakteri Dışındakiler `\\D`",
  "steps.withoutNumberCharacter.description": "Sayı karakteri dışındakileri bulmak için `\\D` kullanılır.",

  "steps.spaceCharacter.title": "Boşluk Karakteri `\\s`",
  "steps.spaceCharacter.description": "Sadece boşluk karakterlerini bulmak için `\\s` kullanılır.",

  "steps.withoutSpaceCharacter.title": "Boşluk Karakteri Dışındakiler `\\S`",
  "steps.withoutSpaceCharacter.description": "Boşluk karakteri dışındakileri bulmak için `\\S` kullanılır.",

  "steps.lookarounds.title": "Bakınmak",
  "steps.lookarounds.description": "Yazdığımız ifadenin, başka bir ifadeden önce ya da sonra geçmesini istiyorsak bakınmaya ihtiyaç duyarız. Bakınmayı öğrenmek için sonraki adıma devam edin.",

  "steps.positiveLookahead.title": "Olumlu İleriye Bakınma: `(?=)`",
  "steps.positiveLookahead.description": "Örneğin metinde saat değerini seçmek istiyoruz. Bu yüzden yalnızca kendinden sonra `PM` ifadesi geçen sayı değerlerini seçmek için ifademizden sonra olumlu ileriye bakınma `(?=)` ifadesini yazmamız gerekir. Parantezlerin içerisinde `=` işaretinden sonra `PM` ifadesini ekleyin.",
  

  "steps.negativeLookahead.title": "Olumsuz İleriye Bakınma: `(?!)`",
  "steps.negativeLookahead.description": "Örneğin metinde saat değeri dışındaki sayıları seçmek istiyoruz. Bu yüzden yalnızca kendinden sonra `PM` ifadesi geçmeyen sayı değerlerini seçmek için ifademizden sonra olumsuz ileriye bakınma `(?!)` ifadesini yazmamız gerekir. Parantezlerin içerisinde `!` işaretinden sonra `PM` ifadesini ekleyin.",
  
  "steps.positiveLookbehind.title": "Olumlu Geriye Bakınma: `(?<=)`",
  "steps.positiveLookbehind.description": "Örneğin metinde fiyat değerini seçmek istiyoruz. Bu yüzden yalnızca kendinden önce `$` ifadesi geçen sayı değerlerini seçmek için ifademizden önce olumlu geriye bakınma `(?<=)` ifadesini yazmamız gerekir. Parantezlerin içerisinde `=` işaretinden sonra `\\$` ifadesini ekleyin.",

  "steps.negativeLookbehind.title": "Olumsuz Geriye Bakınma: `(?&lt;!)`",
  "steps.negativeLookbehind.description": "Örneğin metinde fiyat değeri dışındaki sayıları seçmek istiyoruz. Bu yüzden yalnızca kendinden önce `$` ifadesi geçmeyen sayı değerlerini seçmek için ifademizden önce olumsuz geriye bakınma `(?&lt;!)` ifadesini yazmamız gerekir. Parantezlerin içerisinde `!` işaretinden sonra `\\$` ifadesini ekleyin.",

  "steps.flags.title": "Bayraklar",
  "steps.flags.description": "Bayraklar ifadenin çıktısını değiştirirler. Bu yüzden değiştiriciler `modifiers` olarakta anılırlar. Yazılan ifadenin, metni ayrı satırlar olarak mı ele alacağını, büyük küçük harf duyarlı olup olmayacağını ya da tüm eşleşmeleri bulup bulmayacağını belirler. Bayrakları öğrenmek için sonraki adıma devam edin.",

  "steps.flagsGlobal.title": "Global Bayrağı",
  "steps.flagsGlobal.description": "`global` bayrağı, ifadenin tüm eşleşmeleri seçmesini sağlar. Eğer kullanılmazsa sadece ilk eşleşmeyi seçecektir. Şimdi tüm eşleşmeleri seçebilmek için `global` bayrağını aktif edin.",

  "steps.flagsMultiline.title": "Çoklu Satır Bayrağı",
  "steps.flagsMultiline.description": "Regex tüm metni tek satır olarak görür. Fakat her satırı ayrı ayrı ele alabilmek için `multiline` bayrağını kullanırız. Bu sayede satır sonuna göre yazdığımız ifadeler her satır için ayrı ayrı çalışır. Şimdi tüm eşleşmeleri bulabilmek için `multiline` bayrağını aktif edin.",

  "steps.flagsCaseInsensitive.title": "Büyük/Küçük Harf Duyarsızlık Bayrağı",
  "steps.flagsCaseInsensitive.description": "Yazdığımız ifadenin büyük küçük harf duyarlılığını kaldırmak için `case-insensitive` bayrağını aktif etmeliyiz.",
  
  "steps.greedyMatching.title": "Aç Gözlü Eşleştirme",
  "steps.greedyMatching.description": "Regex varsayılan olarak aç gözlü bir eşleştirme yapar. Bu da eşleştirmenin mümkün olduğu kadar uzun olacağı anlamına gelir. Aşağıdaki örneği inceleyin. `r` ile biten ve öncesinde herhangi bir karakter olabilecek tüm eşleştirmeyi ifade eder. Fakat ilk `r` harfinde durmaz.",

  "steps.lazyMatching.title": "Tembel Eşleştirme",
  "steps.lazyMatching.description": "Tembel eşleştirme, aç gözlü eşleştirmenin aksine ilk uyan eşleşmede durur. Örneğin aşağıdaki örnekte `r` harfi ile biten ve öncesinde herhangi bir karakter olan ilk eşleşmeyi bulmak için `*` 'den sonra bir `?` ekleyin. Bu eşleşmenin ilk `r` harfinde duracağını ifade eder.",

  "steps.completeAllSteps.title": "Tebrikler tüm adımları tamamladın!",
  "steps.completeAllSteps.description": "İstediğin zaman önceki adımlara dönebilir, geçtiğin tüm adımlar arasında kolayca dolaşabilirsin."
}
