{
  "lesson.regexForSeo.starter.title": "Regex для SEO",
  "lesson.regexForSeo.starter.description": "Regex - это набор регулярных выражений, часто используемых в различных сферах, особенно людьми, которые хотят улучшить свою продуктивность. Преимуществом использования Regex для SEO является то, что это позволяет легче анализировать большие объемы данных и писать расширенные фильтры. Мы рекомендуем начать с руководства `Regex 101`, если вы используете Regex впервые. \\n\\nНачните с ввода `OK` (латиницей) в поле Regex, чтобы перейти к первому шагу и получить доступ к более подробному описанию.",

  "lesson.regexForSeo.usage.title": "Варианты использования",
  "lesson.regexForSeo.usage.description": "Вы можете использовать Regex для SEO на таких платформах, как `Google Analytics`, `Google Data Studio`, `Google Sheets`, `Google Search Console`, `Ahrefs`, `Deepcrawl`, `Screaming Frog`. Regex также часто используется в файлах `.htaccess` и `robots.txt (regex-like syntax)`.\\n\\nНиже приведен пример регулярного выражения, которое выберет только те строки в списке, которые начинаются с `Google`.",

  "lesson.regexForSeo.basics.title": "Основы",
  "lesson.regexForSeo.basics.description": "Давайте посмотрим на некоторые регулярные выражения, которые вы будете часто использовать. Мы рекомендуем вам просмотреть руководство `Regex 101`, чтобы узнать больше о них. Напишите `Yes`, чтобы начать.",

  "lesson.regexForSeo.or.title": "Оператор ИЛИ `|`",
  "lesson.regexForSeo.or.description": "Мы используем оператор ИЛИ `|`, чтобы выбрать несколько выражений. Например, выберите текст, содержащий `seo` и `regex`, написав два слова, разделяя их оператором ИЛИ `|`.",

  "lesson.regexForSeo.optional.title": "Опциональный оператор `?`",
  "lesson.regexForSeo.optional.description": "Мы используем его, чтобы указать, что выражение или символ являются необязательными. Например, мы хотим выбрать текст, содержащий одновременно `http` и `https`. Мы можем использовать оператор ИЛИ `|` для этой операции, но есть способ лучше для этих двух почти одинаковых слов.\\n\\nВ этом примере, буква `s` необязательна. Вместо этого, добавьте вопросительный знак `?` после буквы `s`.",

  "lesson.regexForSeo.any.title": "Все символы `.*`",
  "lesson.regexForSeo.any.description": "В регулярном выражении, точка `.` может соответствовать всем символам, включая пробелы. Но она соответствует только одному символу, где она была использована. Символ звездочки `*` означает, что предшествующий символ отсутствует или появляется в тексте больше одного раза. Когда они используются вместе, это означает, что элемент неограниченной длины может находиться там, где они использованы.\\n\\nНиже представлены различные ключевые слова. Добавьте `.*` в конец регулярного выражения, чтобы написать выражение, которое начинается с `how to write` и соответствует всему после него.",

  "lesson.regexForSeo.contains.title": "Содержание",
  "lesson.regexForSeo.contains.description": "Чтобы выбрать текст, который содержит нужные нам слова или фразы, мы пишем слово, которое мы ищем, между двумя выражениями `.*`, которые соответствуют всему. Например, напишите `.*buy.*`, чтобы выбрать то, что включает слово `buy`.",

  "lesson.regexForSeo.negated.title": "Отрицательные наборы символов `[^abc]`",
  "lesson.regexForSeo.negated.description": "Мы используем отрицательные наборы символов `[^]`, чтобы указать символы, которые мы не хотим включать. Символы, которые мы не хотим включать, пишутся в квадратных скобках со знаком каретки в начале. Ниже представлены одновременно `http` и `https`. Так как `http` встречается в обоих словах, это также выберет слово `https`. Напишите `[^s]` после буквы `p`, чтобы исключить букву `s`.",

  "lesson.regexForSeo.caret.title": "Знак каретки `^`",
  "lesson.regexForSeo.caret.description": "Давайте предположим, что у нас есть список URL-адресов, и мы хотим найти только те URL-адреса, которые начинаются с `http`. Но URL-адреса также содержат `http` в остальных частях, кроме начала. Поэтому добавьте знак каретки `^` в начало следующего выражения, чтобы выбрать только те, которые начинаются с `http`.",

  "lesson.regexForSeo.dollarAndEscape.title": "Знак доллара `$` и Escape-символ `\\`",
  "lesson.regexForSeo.dollarAndEscape.description": "У нас снова есть список URL-адресов. Мы хотим найти только те URL-адреса, которые заканчиваются на `.htm`.\\n\\nТак как точка `.` является специальным символом, которому соответствует все, сперва нам нужно отключить точку перед `htm`, используя escape-символ `\\`. Это применимо ко всем специальным символам.\\n\\nТеперь добавьте знак доллара `$` в конец предложения. Это гарантирует, что фильтруемый текст заканчивается выражением, написанным перед ним.",

  "lesson.regexForSeo.limitation.title": "Ограничение длины `{n}`",
  "lesson.regexForSeo.limitation.description": "Мы можем захотеть отфильтровать результаты по длине символов. Например, чтобы выбрать URL-адреса, которые состоят из `35` символов, напишите число, которое вы хотите использовать для длины, `{35}`, используя фигурные скобки после точки `.`.",

  "lesson.regexForSeo.maxLimitation.title": "Ограничение длины (Максимум) `{n,m}`",
  "lesson.regexForSeo.maxLimitation.description": "Чтобы выбрать URL-адреса с максимальной длиной `35` символов, напишите `{1,35}` минимальное и максимальное числовые значения, которые мы будем использовать для длины, используя фигурные скобки после точки `.`.",

  "lesson.regexForSeo.minLimitation.title": "Ограничение длины (Минимум) `{n,}`",
  "lesson.regexForSeo.minLimitation.description": "Чтобы выбрать URL-адреса с минимальной длиной `35` символов, напишите `{35,}`, используя фигурные скобки после точки и заканчивая запятой для минимального числового значения, которое мы будем использовать для длины.",

  "lesson.regexForSeo.robots.title": "robots.txt (regex-like синтаксис)",
  "lesson.regexForSeo.robots.description": "Здесь приведен пример regex-like использования в файле `robots.txt`. Пример показывает, что боты не должны посещать ссылки с расширением `pdf`.",

  "lesson.regexForSeo.htaccess.title": ".htaccess",
  "lesson.regexForSeo.htaccess.description": "Здесь приведен пример использования регулярных выражений в файле `.htaccess`. В примере, ссылки расширения `php` направлены на расширения `html` с кодом `301`.",

  "lesson.regexForSeo.outro.title": "Заключение",
  "lesson.regexForSeo.outro.description": "Знание Regex является навыком, который улучшит продуктивность на любой платформе, которая позволяет использовать регулярные выражения. Как только вы начнете их использовать и улучшать этот навык, они помогут вам выполнять множество повторяющихся задач быстрее и экономить время для других вещей. Чтобы лучше понять основы Regex, вы можете просмотреть руководство `Regex 101`. Вы можете использовать страницу `Playground`, чтобы протестировать ваши выражения на ваших текстах."
}
